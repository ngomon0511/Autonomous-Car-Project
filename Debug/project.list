
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000614c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800633c  0800633c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006344  08006344  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800634c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000000c  08006358  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08006358  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c1e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d0  00000000  00000000  00031c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  00034270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb7  00000000  00000000  000352b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c48  00000000  00000000  00035f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126d6  00000000  00000000  00056baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9c3c  00000000  00000000  00069285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045a8  00000000  00000000  00132ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0013746c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062c4 	.word	0x080062c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080062c4 	.word	0x080062c4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <compareString>:

// To read encoder
int cntPulse1, cntPulse2;
float rpm1, rpm2, encodeSpeed1, encodeSpeed2; // round per minute and radian per second

bool compareString(const char* str1, const char* str2) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
    while (*str1 != '\0' || *str2 != '\0') {
 8000d52:	e00d      	b.n	8000d70 <compareString+0x28>
        if (*str1 != *str2) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d001      	beq.n	8000d64 <compareString+0x1c>
            return false;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e00e      	b.n	8000d82 <compareString+0x3a>
        }
        str1++;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
        str2++;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	603b      	str	r3, [r7, #0]
    while (*str1 != '\0' || *str2 != '\0') {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1ed      	bne.n	8000d54 <compareString+0xc>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1e9      	bne.n	8000d54 <compareString+0xc>
    }
    return true;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <numberToChar>:

void numberToChar(float num, uint8_t result[2]) // num to two chars
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d9a:	6038      	str	r0, [r7, #0]
    int firstChar = (int)num / 10;
 8000d9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da4:	ee17 1a90 	vmov	r1, s15
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <numberToChar+0x70>)
 8000daa:	fb83 2301 	smull	r2, r3, r3, r1
 8000dae:	109a      	asrs	r2, r3, #2
 8000db0:	17cb      	asrs	r3, r1, #31
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	60fb      	str	r3, [r7, #12]
    int secondChar = (int)num % 10;
 8000db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dbe:	ee17 2a90 	vmov	r2, s15
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <numberToChar+0x70>)
 8000dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8000dc8:	1099      	asrs	r1, r3, #2
 8000dca:	17d3      	asrs	r3, r2, #31
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	60bb      	str	r3, [r7, #8]
    result[0] = firstChar + '0';
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	3330      	adds	r3, #48	; 0x30
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	701a      	strb	r2, [r3, #0]
    result[1] = secondChar + '0';
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	3230      	adds	r2, #48	; 0x30
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	701a      	strb	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	66666667 	.word	0x66666667

08000e04 <PI_Controller>:

int16_t PI_Controller(const char* motor, const char* direction, float targetSpeed, float encoderSpeed)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e12:	edc7 0a00 	vstr	s1, [r7]
	if (compareString(motor, "motor1"))
 8000e16:	496a      	ldr	r1, [pc, #424]	; (8000fc0 <PI_Controller+0x1bc>)
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff ff95 	bl	8000d48 <compareString>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d021      	beq.n	8000e68 <PI_Controller+0x64>
	{
	    if (compareString(direction, "cw"))
 8000e24:	4967      	ldr	r1, [pc, #412]	; (8000fc4 <PI_Controller+0x1c0>)
 8000e26:	68b8      	ldr	r0, [r7, #8]
 8000e28:	f7ff ff8e 	bl	8000d48 <compareString>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d009      	beq.n	8000e46 <PI_Controller+0x42>
	    {
	        Kp = 5.364516129;
 8000e32:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <PI_Controller+0x1c4>)
 8000e34:	4a65      	ldr	r2, [pc, #404]	; (8000fcc <PI_Controller+0x1c8>)
 8000e36:	601a      	str	r2, [r3, #0]
	        Ki = 32.25806452;
 8000e38:	4b65      	ldr	r3, [pc, #404]	; (8000fd0 <PI_Controller+0x1cc>)
 8000e3a:	4a66      	ldr	r2, [pc, #408]	; (8000fd4 <PI_Controller+0x1d0>)
 8000e3c:	601a      	str	r2, [r3, #0]
	        Kb = 6.013229104;
 8000e3e:	4b66      	ldr	r3, [pc, #408]	; (8000fd8 <PI_Controller+0x1d4>)
 8000e40:	4a66      	ldr	r2, [pc, #408]	; (8000fdc <PI_Controller+0x1d8>)
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	e038      	b.n	8000eb8 <PI_Controller+0xb4>
	    }
	    else if (compareString(direction, "ccw"))
 8000e46:	4966      	ldr	r1, [pc, #408]	; (8000fe0 <PI_Controller+0x1dc>)
 8000e48:	68b8      	ldr	r0, [r7, #8]
 8000e4a:	f7ff ff7d 	bl	8000d48 <compareString>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d031      	beq.n	8000eb8 <PI_Controller+0xb4>
	    {
	        Kp = 4.75;
 8000e54:	4b5c      	ldr	r3, [pc, #368]	; (8000fc8 <PI_Controller+0x1c4>)
 8000e56:	4a63      	ldr	r2, [pc, #396]	; (8000fe4 <PI_Controller+0x1e0>)
 8000e58:	601a      	str	r2, [r3, #0]
	        Ki = 31.25;
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <PI_Controller+0x1cc>)
 8000e5c:	4a62      	ldr	r2, [pc, #392]	; (8000fe8 <PI_Controller+0x1e4>)
 8000e5e:	601a      	str	r2, [r3, #0]
	        Kb = 6.578947368;
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <PI_Controller+0x1d4>)
 8000e62:	4a62      	ldr	r2, [pc, #392]	; (8000fec <PI_Controller+0x1e8>)
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e027      	b.n	8000eb8 <PI_Controller+0xb4>
	    }
	}
	else if (compareString(motor, "motor2"))
 8000e68:	4961      	ldr	r1, [pc, #388]	; (8000ff0 <PI_Controller+0x1ec>)
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff ff6c 	bl	8000d48 <compareString>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d020      	beq.n	8000eb8 <PI_Controller+0xb4>
	{
	    if (compareString(direction, "ccw"))
 8000e76:	495a      	ldr	r1, [pc, #360]	; (8000fe0 <PI_Controller+0x1dc>)
 8000e78:	68b8      	ldr	r0, [r7, #8]
 8000e7a:	f7ff ff65 	bl	8000d48 <compareString>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <PI_Controller+0x94>
	    {
	        Kp = 4.240625;
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <PI_Controller+0x1c4>)
 8000e86:	4a5b      	ldr	r2, [pc, #364]	; (8000ff4 <PI_Controller+0x1f0>)
 8000e88:	601a      	str	r2, [r3, #0]
	        Ki = 31.25;
 8000e8a:	4b51      	ldr	r3, [pc, #324]	; (8000fd0 <PI_Controller+0x1cc>)
 8000e8c:	4a56      	ldr	r2, [pc, #344]	; (8000fe8 <PI_Controller+0x1e4>)
 8000e8e:	601a      	str	r2, [r3, #0]
	        Kb = 7.369196758;
 8000e90:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <PI_Controller+0x1d4>)
 8000e92:	4a59      	ldr	r2, [pc, #356]	; (8000ff8 <PI_Controller+0x1f4>)
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e00f      	b.n	8000eb8 <PI_Controller+0xb4>
	    }
	    else if (compareString(direction, "cw"))
 8000e98:	494a      	ldr	r1, [pc, #296]	; (8000fc4 <PI_Controller+0x1c0>)
 8000e9a:	68b8      	ldr	r0, [r7, #8]
 8000e9c:	f7ff ff54 	bl	8000d48 <compareString>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d008      	beq.n	8000eb8 <PI_Controller+0xb4>
	    {
	        Kp = 4.153333333;
 8000ea6:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <PI_Controller+0x1c4>)
 8000ea8:	4a54      	ldr	r2, [pc, #336]	; (8000ffc <PI_Controller+0x1f8>)
 8000eaa:	601a      	str	r2, [r3, #0]
	        Ki = 33.33333333;
 8000eac:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <PI_Controller+0x1cc>)
 8000eae:	4a54      	ldr	r2, [pc, #336]	; (8001000 <PI_Controller+0x1fc>)
 8000eb0:	601a      	str	r2, [r3, #0]
	        Kb = 8.025682183;
 8000eb2:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <PI_Controller+0x1d4>)
 8000eb4:	4a53      	ldr	r2, [pc, #332]	; (8001004 <PI_Controller+0x200>)
 8000eb6:	601a      	str	r2, [r3, #0]

	int16_t u_out;
	float error, u_p, u_i, u_design;
	static float errorSignal, u_i_pre;

	error = targetSpeed - encoderSpeed;
 8000eb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ebc:	edd7 7a00 	vldr	s15, [r7]
 8000ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec4:	edc7 7a08 	vstr	s15, [r7, #32]

	// For P
	u_p = Kp*error;
 8000ec8:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <PI_Controller+0x1c4>)
 8000eca:	edd3 7a00 	vldr	s15, [r3]
 8000ece:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edc7 7a07 	vstr	s15, [r7, #28]

	// For I
	u_i = u_i_pre + Ki*Ts*error + Kb*Ts*errorSignal;
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <PI_Controller+0x1cc>)
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001008 <PI_Controller+0x204>
 8000ee4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ee8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef0:	4b46      	ldr	r3, [pc, #280]	; (800100c <PI_Controller+0x208>)
 8000ef2:	edd3 7a00 	vldr	s15, [r3]
 8000ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <PI_Controller+0x1d4>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001008 <PI_Controller+0x204>
 8000f04:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <PI_Controller+0x20c>)
 8000f0a:	edd3 7a00 	vldr	s15, [r3]
 8000f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f16:	edc7 7a06 	vstr	s15, [r7, #24]
	u_i_pre = u_i;
 8000f1a:	4a3c      	ldr	r2, [pc, #240]	; (800100c <PI_Controller+0x208>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6013      	str	r3, [r2, #0]

	// PI Controller
	u_design = u_p + u_i;
 8000f20:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2c:	edc7 7a05 	vstr	s15, [r7, #20]

	// Check error of signal
	if (u_design > maxPWM) {
 8000f30:	eddf 7a38 	vldr	s15, [pc, #224]	; 8001014 <PI_Controller+0x210>
 8000f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f38:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	dd0f      	ble.n	8000f66 <PI_Controller+0x162>
		u_out = maxPWM;
 8000f46:	2364      	movs	r3, #100	; 0x64
 8000f48:	84fb      	strh	r3, [r7, #38]	; 0x26
		errorSignal = u_out - u_design;
 8000f4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f56:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <PI_Controller+0x20c>)
 8000f60:	edc3 7a00 	vstr	s15, [r3]
 8000f64:	e025      	b.n	8000fb2 <PI_Controller+0x1ae>
	}
	else if (u_design < minPWM)
 8000f66:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001018 <PI_Controller+0x214>
 8000f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7a:	d50f      	bpl.n	8000f9c <PI_Controller+0x198>
	{
		u_out = minPWM;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
		errorSignal = u_out - u_design;
 8000f80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <PI_Controller+0x20c>)
 8000f96:	edc3 7a00 	vstr	s15, [r3]
 8000f9a:	e00a      	b.n	8000fb2 <PI_Controller+0x1ae>
	}
	else
	{
		u_out = (int16_t)u_design;
 8000f9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa4:	ee17 3a90 	vmov	r3, s15
 8000fa8:	84fb      	strh	r3, [r7, #38]	; 0x26
		errorSignal = 0;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <PI_Controller+0x20c>)
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	}

	return u_out;
 8000fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	080062dc 	.word	0x080062dc
 8000fc4:	080062e4 	.word	0x080062e4
 8000fc8:	20000228 	.word	0x20000228
 8000fcc:	40abaa1e 	.word	0x40abaa1e
 8000fd0:	2000022c 	.word	0x2000022c
 8000fd4:	42010842 	.word	0x42010842
 8000fd8:	20000230 	.word	0x20000230
 8000fdc:	40c06c5f 	.word	0x40c06c5f
 8000fe0:	080062e8 	.word	0x080062e8
 8000fe4:	40980000 	.word	0x40980000
 8000fe8:	41fa0000 	.word	0x41fa0000
 8000fec:	40d286bd 	.word	0x40d286bd
 8000ff0:	080062ec 	.word	0x080062ec
 8000ff4:	4087b333 	.word	0x4087b333
 8000ff8:	40ebd076 	.word	0x40ebd076
 8000ffc:	4084e81b 	.word	0x4084e81b
 8001000:	42055555 	.word	0x42055555
 8001004:	41006932 	.word	0x41006932
 8001008:	3c23d70a 	.word	0x3c23d70a
 800100c:	2000024c 	.word	0x2000024c
 8001010:	20000250 	.word	0x20000250
 8001014:	00000064 	.word	0x00000064
 8001018:	00000000 	.word	0x00000000

0800101c <readInfraredSensor>:

void readInfraredSensor()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    uartTxBuffer[0] = (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_IS1_Pin) == GPIO_PIN_SET) ? '1' : '0';
 8001020:	2108      	movs	r1, #8
 8001022:	4820      	ldr	r0, [pc, #128]	; (80010a4 <readInfraredSensor+0x88>)
 8001024:	f001 fd04 	bl	8002a30 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d101      	bne.n	8001032 <readInfraredSensor+0x16>
 800102e:	2231      	movs	r2, #49	; 0x31
 8001030:	e000      	b.n	8001034 <readInfraredSensor+0x18>
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <readInfraredSensor+0x8c>)
 8001036:	701a      	strb	r2, [r3, #0]
    uartTxBuffer[1] = (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_IS2_Pin) == GPIO_PIN_SET) ? '1' : '0';
 8001038:	2110      	movs	r1, #16
 800103a:	481a      	ldr	r0, [pc, #104]	; (80010a4 <readInfraredSensor+0x88>)
 800103c:	f001 fcf8 	bl	8002a30 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <readInfraredSensor+0x2e>
 8001046:	2231      	movs	r2, #49	; 0x31
 8001048:	e000      	b.n	800104c <readInfraredSensor+0x30>
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <readInfraredSensor+0x8c>)
 800104e:	705a      	strb	r2, [r3, #1]
    uartTxBuffer[2] = (HAL_GPIO_ReadPin(GPIOB, GPIO_Input_IS3_Pin) == GPIO_PIN_SET) ? '1' : '0';
 8001050:	2120      	movs	r1, #32
 8001052:	4814      	ldr	r0, [pc, #80]	; (80010a4 <readInfraredSensor+0x88>)
 8001054:	f001 fcec 	bl	8002a30 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d101      	bne.n	8001062 <readInfraredSensor+0x46>
 800105e:	2231      	movs	r2, #49	; 0x31
 8001060:	e000      	b.n	8001064 <readInfraredSensor+0x48>
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <readInfraredSensor+0x8c>)
 8001066:	709a      	strb	r2, [r3, #2]
    uartTxBuffer[3] = (HAL_GPIO_ReadPin(GPIOA, GPIO_Input_IS4_Pin) == GPIO_PIN_SET) ? '1' : '0';
 8001068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f001 fcde 	bl	8002a30 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <readInfraredSensor+0x62>
 800107a:	2231      	movs	r2, #49	; 0x31
 800107c:	e000      	b.n	8001080 <readInfraredSensor+0x64>
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <readInfraredSensor+0x8c>)
 8001082:	70da      	strb	r2, [r3, #3]
    uartTxBuffer[4] = (HAL_GPIO_ReadPin(GPIOA, GPIO_Input_IS5_Pin) == GPIO_PIN_SET) ? '1' : '0';
 8001084:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f001 fcd0 	bl	8002a30 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <readInfraredSensor+0x7e>
 8001096:	2231      	movs	r2, #49	; 0x31
 8001098:	e000      	b.n	800109c <readInfraredSensor+0x80>
 800109a:	2230      	movs	r2, #48	; 0x30
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <readInfraredSensor+0x8c>)
 800109e:	711a      	strb	r2, [r3, #4]
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	48000400 	.word	0x48000400
 80010a8:	200001f0 	.word	0x200001f0
 80010ac:	00000000 	.word	0x00000000

080010b0 <readUltrasonicSensor>:

void readUltrasonicSensor()
{
 80010b0:	b598      	push	{r3, r4, r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	4839      	ldr	r0, [pc, #228]	; (80011a0 <readUltrasonicSensor+0xf0>)
 80010ba:	f001 fcd1 	bl	8002a60 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80010be:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <readUltrasonicSensor+0xf4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim7) < 10);  // wait for 10 us
 80010c6:	bf00      	nop
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <readUltrasonicSensor+0xf4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	2b09      	cmp	r3, #9
 80010d0:	d9fa      	bls.n	80010c8 <readUltrasonicSensor+0x18>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	4832      	ldr	r0, [pc, #200]	; (80011a0 <readUltrasonicSensor+0xf0>)
 80010d8:	f001 fcc2 	bl	8002a60 <HAL_GPIO_WritePin>

	uMillis = HAL_GetTick(); // calib sensor
 80010dc:	f000 ffaa 	bl	8002034 <HAL_GetTick>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a31      	ldr	r2, [pc, #196]	; (80011a8 <readUltrasonicSensor+0xf8>)
 80010e4:	6013      	str	r3, [r2, #0]
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && uMillis + 10 >  HAL_GetTick());
 80010e6:	bf00      	nop
 80010e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f001 fc9e 	bl	8002a30 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d108      	bne.n	800110c <readUltrasonicSensor+0x5c>
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <readUltrasonicSensor+0xf8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f103 040a 	add.w	r4, r3, #10
 8001102:	f000 ff97 	bl	8002034 <HAL_GetTick>
 8001106:	4603      	mov	r3, r0
 8001108:	429c      	cmp	r4, r3
 800110a:	d8ed      	bhi.n	80010e8 <readUltrasonicSensor+0x38>
	val1 = __HAL_TIM_GET_COUNTER (&htim7);
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <readUltrasonicSensor+0xf4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	4a26      	ldr	r2, [pc, #152]	; (80011ac <readUltrasonicSensor+0xfc>)
 8001114:	6013      	str	r3, [r2, #0]

	uMillis = HAL_GetTick(); // calib sensor
 8001116:	f000 ff8d 	bl	8002034 <HAL_GetTick>
 800111a:	4603      	mov	r3, r0
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <readUltrasonicSensor+0xf8>)
 800111e:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && uMillis + 50 > HAL_GetTick());
 8001120:	bf00      	nop
 8001122:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f001 fc81 	bl	8002a30 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d008      	beq.n	8001146 <readUltrasonicSensor+0x96>
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <readUltrasonicSensor+0xf8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800113c:	f000 ff7a 	bl	8002034 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	429c      	cmp	r4, r3
 8001144:	d8ed      	bhi.n	8001122 <readUltrasonicSensor+0x72>
	val2 = __HAL_TIM_GET_COUNTER (&htim7);
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <readUltrasonicSensor+0xf4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <readUltrasonicSensor+0x100>)
 800114e:	6013      	str	r3, [r2, #0]

	disObs = (val2-val1)* 0.034/2; //cm
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <readUltrasonicSensor+0x100>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <readUltrasonicSensor+0xfc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f97a 	bl	8000454 <__aeabi_ui2d>
 8001160:	a30d      	add	r3, pc, #52	; (adr r3, 8001198 <readUltrasonicSensor+0xe8>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff f9ef 	bl	8000548 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117a:	f7ff fb0f 	bl	800079c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fbf1 	bl	800096c <__aeabi_d2uiz>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <readUltrasonicSensor+0x104>)
 8001190:	801a      	strh	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	bd98      	pop	{r3, r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	b020c49c 	.word	0xb020c49c
 800119c:	3fa16872 	.word	0x3fa16872
 80011a0:	48000400 	.word	0x48000400
 80011a4:	200000c0 	.word	0x200000c0
 80011a8:	200001e0 	.word	0x200001e0
 80011ac:	200001e4 	.word	0x200001e4
 80011b0:	200001e8 	.word	0x200001e8
 80011b4:	200001ec 	.word	0x200001ec

080011b8 <transmitData>:

void transmitData()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
	char sendData[SIZE_TX_BUFFER];
	memcpy(sendData, uartTxBuffer, SIZE_TX_BUFFER);
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <transmitData+0x2c>)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	sendData[SIZE_TX_BUFFER - 1] = '.';
 80011c8:	232e      	movs	r3, #46	; 0x2e
 80011ca:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*)sendData, SIZE_TX_BUFFER, HAL_MAX_DELAY);
 80011cc:	1d39      	adds	r1, r7, #4
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	220c      	movs	r2, #12
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <transmitData+0x30>)
 80011d6:	f003 fe11 	bl	8004dfc <HAL_UART_Transmit>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001f0 	.word	0x200001f0
 80011e8:	2000010c 	.word	0x2000010c

080011ec <processDataReceived>:

void processDataReceived()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	runMotor1 = uartRxBuffer[0];
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <processDataReceived+0x80>)
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <processDataReceived+0x84>)
 80011f6:	701a      	strb	r2, [r3, #0]
	strcpy(directMotor1, (uartRxBuffer[1] == '0')  ? "cw" : "ccw");
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <processDataReceived+0x80>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	2b30      	cmp	r3, #48	; 0x30
 80011fe:	d101      	bne.n	8001204 <processDataReceived+0x18>
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <processDataReceived+0x88>)
 8001202:	e000      	b.n	8001206 <processDataReceived+0x1a>
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <processDataReceived+0x8c>)
 8001206:	4619      	mov	r1, r3
 8001208:	481c      	ldr	r0, [pc, #112]	; (800127c <processDataReceived+0x90>)
 800120a:	f005 f853 	bl	80062b4 <strcpy>
	setSpeed1 = (uartRxBuffer[2] - '0')*10 + (uartRxBuffer[3] - '0');
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <processDataReceived+0x80>)
 8001210:	789b      	ldrb	r3, [r3, #2]
 8001212:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	461a      	mov	r2, r3
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <processDataReceived+0x80>)
 8001222:	78db      	ldrb	r3, [r3, #3]
 8001224:	3b30      	subs	r3, #48	; 0x30
 8001226:	4413      	add	r3, r2
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <processDataReceived+0x94>)
 800122a:	6013      	str	r3, [r2, #0]
	runMotor2 = uartRxBuffer[4];
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <processDataReceived+0x80>)
 800122e:	791a      	ldrb	r2, [r3, #4]
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <processDataReceived+0x98>)
 8001232:	701a      	strb	r2, [r3, #0]
	strcpy(directMotor2, (uartRxBuffer[5] == '0') ? "cw" : "ccw");
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <processDataReceived+0x80>)
 8001236:	795b      	ldrb	r3, [r3, #5]
 8001238:	2b30      	cmp	r3, #48	; 0x30
 800123a:	d101      	bne.n	8001240 <processDataReceived+0x54>
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <processDataReceived+0x88>)
 800123e:	e000      	b.n	8001242 <processDataReceived+0x56>
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <processDataReceived+0x8c>)
 8001242:	4619      	mov	r1, r3
 8001244:	4810      	ldr	r0, [pc, #64]	; (8001288 <processDataReceived+0x9c>)
 8001246:	f005 f835 	bl	80062b4 <strcpy>
	setSpeed2 = (uartRxBuffer[6] - '0')*10 + (uartRxBuffer[7] - '0');
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <processDataReceived+0x80>)
 800124c:	799b      	ldrb	r3, [r3, #6]
 800124e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	461a      	mov	r2, r3
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <processDataReceived+0x80>)
 800125e:	79db      	ldrb	r3, [r3, #7]
 8001260:	3b30      	subs	r3, #48	; 0x30
 8001262:	4413      	add	r3, r2
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <processDataReceived+0xa0>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000208 	.word	0x20000208
 8001270:	2000021c 	.word	0x2000021c
 8001274:	080062e4 	.word	0x080062e4
 8001278:	080062e8 	.word	0x080062e8
 800127c:	20000220 	.word	0x20000220
 8001280:	20000214 	.word	0x20000214
 8001284:	2000021d 	.word	0x2000021d
 8001288:	20000224 	.word	0x20000224
 800128c:	20000218 	.word	0x20000218

08001290 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_UART_RxCpltCallback+0x68>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d124      	bne.n	80012ee <HAL_UART_RxCpltCallback+0x5e>
	{
		HAL_UART_Receive_DMA(&huart2, uartRxBuffer, SIZE_RX_BUFFER);
 80012a4:	2208      	movs	r2, #8
 80012a6:	4915      	ldr	r1, [pc, #84]	; (80012fc <HAL_UART_RxCpltCallback+0x6c>)
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <HAL_UART_RxCpltCallback+0x68>)
 80012aa:	f003 fe31 	bl	8004f10 <HAL_UART_Receive_DMA>
		processDataReceived();
 80012ae:	f7ff ff9d 	bl	80011ec <processDataReceived>

		if (runMotor1 == '0')
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_UART_RxCpltCallback+0x70>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b30      	cmp	r3, #48	; 0x30
 80012b8:	d109      	bne.n	80012ce <HAL_UART_RxCpltCallback+0x3e>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN1_Pin, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2101      	movs	r1, #1
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <HAL_UART_RxCpltCallback+0x74>)
 80012c0:	f001 fbce 	bl	8002a60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN2_Pin, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2102      	movs	r1, #2
 80012c8:	480e      	ldr	r0, [pc, #56]	; (8001304 <HAL_UART_RxCpltCallback+0x74>)
 80012ca:	f001 fbc9 	bl	8002a60 <HAL_GPIO_WritePin>
		}

		if (runMotor2 == '0')
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_UART_RxCpltCallback+0x78>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b30      	cmp	r3, #48	; 0x30
 80012d4:	d10b      	bne.n	80012ee <HAL_UART_RxCpltCallback+0x5e>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN3_Pin, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f001 fbbf 	bl	8002a60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN4_Pin, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2108      	movs	r1, #8
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f001 fbb9 	bl	8002a60 <HAL_GPIO_WritePin>
		}
	}
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000010c 	.word	0x2000010c
 80012fc:	20000208 	.word	0x20000208
 8001300:	2000021c 	.word	0x2000021c
 8001304:	48000400 	.word	0x48000400
 8001308:	2000021d 	.word	0x2000021d

0800130c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_6)
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2b40      	cmp	r3, #64	; 0x40
 800131a:	d104      	bne.n	8001326 <HAL_GPIO_EXTI_Callback+0x1a>
    {
    	cntPulse1++;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_GPIO_EXTI_Callback+0x38>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_GPIO_EXTI_Callback+0x38>)
 8001324:	6013      	str	r3, [r2, #0]
    }

    if (GPIO_Pin == GPIO_PIN_4)
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	2b10      	cmp	r3, #16
 800132a:	d104      	bne.n	8001336 <HAL_GPIO_EXTI_Callback+0x2a>
    {
    	cntPulse2++;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_GPIO_EXTI_Callback+0x3c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001334:	6013      	str	r3, [r2, #0]
    }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000234 	.word	0x20000234
 8001348:	20000238 	.word	0x20000238

0800134c <controlVelocityM1>:

int16_t controlVelocityM1(const char* direction, float targetSpeed, float encoderSpeed)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	ed87 0a02 	vstr	s0, [r7, #8]
 8001358:	edc7 0a01 	vstr	s1, [r7, #4]
	int16_t controlPulse = PI_Controller("motor1", direction, targetSpeed, encoderSpeed);
 800135c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001360:	ed97 0a02 	vldr	s0, [r7, #8]
 8001364:	68f9      	ldr	r1, [r7, #12]
 8001366:	4819      	ldr	r0, [pc, #100]	; (80013cc <controlVelocityM1+0x80>)
 8001368:	f7ff fd4c 	bl	8000e04 <PI_Controller>
 800136c:	4603      	mov	r3, r0
 800136e:	82fb      	strh	r3, [r7, #22]

	if (compareString(direction, "cw"))
 8001370:	4917      	ldr	r1, [pc, #92]	; (80013d0 <controlVelocityM1+0x84>)
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff fce8 	bl	8000d48 <compareString>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <controlVelocityM1+0x48>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN1_Pin, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	2101      	movs	r1, #1
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <controlVelocityM1+0x88>)
 8001384:	f001 fb6c 	bl	8002a60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN2_Pin, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2102      	movs	r1, #2
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <controlVelocityM1+0x88>)
 800138e:	f001 fb67 	bl	8002a60 <HAL_GPIO_WritePin>
 8001392:	e010      	b.n	80013b6 <controlVelocityM1+0x6a>
	}

	else if (compareString(direction, "ccw"))
 8001394:	4910      	ldr	r1, [pc, #64]	; (80013d8 <controlVelocityM1+0x8c>)
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff fcd6 	bl	8000d48 <compareString>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <controlVelocityM1+0x6a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN1_Pin, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2101      	movs	r1, #1
 80013a6:	480b      	ldr	r0, [pc, #44]	; (80013d4 <controlVelocityM1+0x88>)
 80013a8:	f001 fb5a 	bl	8002a60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN2_Pin, 1);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2102      	movs	r1, #2
 80013b0:	4808      	ldr	r0, [pc, #32]	; (80013d4 <controlVelocityM1+0x88>)
 80013b2:	f001 fb55 	bl	8002a60 <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, controlPulse);
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <controlVelocityM1+0x90>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013be:	635a      	str	r2, [r3, #52]	; 0x34

	return controlPulse;
 80013c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	080062dc 	.word	0x080062dc
 80013d0:	080062e4 	.word	0x080062e4
 80013d4:	48000400 	.word	0x48000400
 80013d8:	080062e8 	.word	0x080062e8
 80013dc:	20000028 	.word	0x20000028

080013e0 <controlVelocityM2>:

int16_t controlVelocityM2(const char* direction, float targetSpeed, float encoderSpeed)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80013ec:	edc7 0a01 	vstr	s1, [r7, #4]
	int16_t controlPulse = PI_Controller("motor2", direction, targetSpeed, encoderSpeed);
 80013f0:	edd7 0a01 	vldr	s1, [r7, #4]
 80013f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f8:	68f9      	ldr	r1, [r7, #12]
 80013fa:	481b      	ldr	r0, [pc, #108]	; (8001468 <controlVelocityM2+0x88>)
 80013fc:	f7ff fd02 	bl	8000e04 <PI_Controller>
 8001400:	4603      	mov	r3, r0
 8001402:	82fb      	strh	r3, [r7, #22]

	if (compareString(direction, "cw"))
 8001404:	4919      	ldr	r1, [pc, #100]	; (800146c <controlVelocityM2+0x8c>)
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff fc9e 	bl	8000d48 <compareString>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00c      	beq.n	800142c <controlVelocityM2+0x4c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN3_Pin, 1);
 8001412:	2201      	movs	r2, #1
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f001 fb21 	bl	8002a60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN4_Pin, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2108      	movs	r1, #8
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f001 fb1b 	bl	8002a60 <HAL_GPIO_WritePin>
 800142a:	e012      	b.n	8001452 <controlVelocityM2+0x72>
	}

	else if (compareString(direction, "ccw"))
 800142c:	4910      	ldr	r1, [pc, #64]	; (8001470 <controlVelocityM2+0x90>)
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff fc8a 	bl	8000d48 <compareString>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <controlVelocityM2+0x72>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN3_Pin, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f001 fb0d 	bl	8002a60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN4_Pin, 1);
 8001446:	2201      	movs	r2, #1
 8001448:	2108      	movs	r1, #8
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f001 fb07 	bl	8002a60 <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, controlPulse);
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <controlVelocityM2+0x94>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800145a:	639a      	str	r2, [r3, #56]	; 0x38

	return controlPulse;
 800145c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	080062ec 	.word	0x080062ec
 800146c:	080062e4 	.word	0x080062e4
 8001470:	080062e8 	.word	0x080062e8
 8001474:	20000028 	.word	0x20000028

08001478 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == htim6.Instance) // 1 millisecond
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b8a      	ldr	r3, [pc, #552]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8109 	bne.w	80016a0 <HAL_TIM_PeriodElapsedCallback+0x228>
	{
		cntMilSecond++;
 800148e:	4b89      	ldr	r3, [pc, #548]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a87      	ldr	r2, [pc, #540]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001496:	6013      	str	r3, [r2, #0]

		if (cntMilSecond == 50) // 50 milliseconds
 8001498:	4b86      	ldr	r3, [pc, #536]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b32      	cmp	r3, #50	; 0x32
 800149e:	d13d      	bne.n	800151c <HAL_TIM_PeriodElapsedCallback+0xa4>
		{
			readInfraredSensor();
 80014a0:	f7ff fdbc 	bl	800101c <readInfraredSensor>

			numberToChar(disObs > 99 ? 99 : disObs, convertedDisObs);
 80014a4:	4b84      	ldr	r3, [pc, #528]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	2b63      	cmp	r3, #99	; 0x63
 80014aa:	bf28      	it	cs
 80014ac:	2363      	movcs	r3, #99	; 0x63
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b8:	4880      	ldr	r0, [pc, #512]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	f7ff fc67 	bl	8000d90 <numberToChar>
			uartTxBuffer[5] = convertedDisObs[0];
 80014c2:	4b7e      	ldr	r3, [pc, #504]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	4b7e      	ldr	r3, [pc, #504]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80014c8:	715a      	strb	r2, [r3, #5]
			uartTxBuffer[6] = convertedDisObs[1];
 80014ca:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80014cc:	785a      	ldrb	r2, [r3, #1]
 80014ce:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80014d0:	719a      	strb	r2, [r3, #6]

			// Record motor speed to transmit
			numberToChar(encodeSpeed1, convertedSpeed1);
 80014d2:	4b7c      	ldr	r3, [pc, #496]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	487b      	ldr	r0, [pc, #492]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	f7ff fc57 	bl	8000d90 <numberToChar>
			uartTxBuffer[7] = convertedSpeed1[0];
 80014e2:	4b79      	ldr	r3, [pc, #484]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80014e8:	71da      	strb	r2, [r3, #7]
			uartTxBuffer[8] = convertedSpeed1[1];
 80014ea:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80014ec:	785a      	ldrb	r2, [r3, #1]
 80014ee:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80014f0:	721a      	strb	r2, [r3, #8]

			numberToChar(encodeSpeed2, convertedSpeed2);
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	4875      	ldr	r0, [pc, #468]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	f7ff fc47 	bl	8000d90 <numberToChar>
			uartTxBuffer[9] = convertedSpeed2[0];
 8001502:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	4b6e      	ldr	r3, [pc, #440]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001508:	725a      	strb	r2, [r3, #9]
			uartTxBuffer[10] = convertedSpeed2[1];
 800150a:	4b71      	ldr	r3, [pc, #452]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800150c:	785a      	ldrb	r2, [r3, #1]
 800150e:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001510:	729a      	strb	r2, [r3, #10]

			transmitData();
 8001512:	f7ff fe51 	bl	80011b8 <transmitData>

			cntMilSecond = 0;
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
		}

		if (cntMilSecond % 10 == 0) // 10 milliseconds
 800151c:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001522:	fb83 2301 	smull	r2, r3, r3, r1
 8001526:	109a      	asrs	r2, r3, #2
 8001528:	17cb      	asrs	r3, r1, #31
 800152a:	1ad2      	subs	r2, r2, r3
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	1aca      	subs	r2, r1, r3
 8001536:	2a00      	cmp	r2, #0
 8001538:	f040 80b2 	bne.w	80016a0 <HAL_TIM_PeriodElapsedCallback+0x228>
		{
			rpm1 = ((float)cntPulse1/330)*100*60;
 800153c:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	ee07 3a90 	vmov	s15, r3
 8001544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001548:	eddf 6a64 	vldr	s13, [pc, #400]	; 80016dc <HAL_TIM_PeriodElapsedCallback+0x264>
 800154c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001550:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80016e0 <HAL_TIM_PeriodElapsedCallback+0x268>
 8001554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001558:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80016e4 <HAL_TIM_PeriodElapsedCallback+0x26c>
 800155c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001560:	4b61      	ldr	r3, [pc, #388]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001562:	edc3 7a00 	vstr	s15, [r3]
			encodeSpeed1 = rpm1 / 60 * (2*M_PI);
 8001566:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80016e4 <HAL_TIM_PeriodElapsedCallback+0x26c>
 8001570:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001574:	ee16 0a90 	vmov	r0, s13
 8001578:	f7fe ff8e 	bl	8000498 <__aeabi_f2d>
 800157c:	a34a      	add	r3, pc, #296	; (adr r3, 80016a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe ffe1 	bl	8000548 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa0d 	bl	80009ac <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a4b      	ldr	r2, [pc, #300]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001596:	6013      	str	r3, [r2, #0]
			cntPulse1 = 0;
 8001598:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]

			if (runMotor1 == '1')
 800159e:	4b53      	ldr	r3, [pc, #332]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x274>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b31      	cmp	r3, #49	; 0x31
 80015a4:	d114      	bne.n	80015d0 <HAL_TIM_PeriodElapsedCallback+0x158>
			{
				sig1 = controlVelocityM1(directMotor1, setSpeed1, encodeSpeed1);
 80015a6:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	eef0 0a47 	vmov.f32	s1, s14
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	484c      	ldr	r0, [pc, #304]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80015c2:	f7ff fec3 	bl	800134c <controlVelocityM1>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015cc:	801a      	strh	r2, [r3, #0]
 80015ce:	e00d      	b.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x174>
			}
			else if (runMotor1 == '0')
 80015d0:	4b46      	ldr	r3, [pc, #280]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x274>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b30      	cmp	r3, #48	; 0x30
 80015d6:	d109      	bne.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x174>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN1_Pin, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2101      	movs	r1, #1
 80015dc:	4847      	ldr	r0, [pc, #284]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015de:	f001 fa3f 	bl	8002a60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN2_Pin, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2102      	movs	r1, #2
 80015e6:	4845      	ldr	r0, [pc, #276]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015e8:	f001 fa3a 	bl	8002a60 <HAL_GPIO_WritePin>
			}

			rpm2 = ((float)cntPulse2/330)*100*60;
 80015ec:	4b44      	ldr	r3, [pc, #272]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f8:	eddf 6a38 	vldr	s13, [pc, #224]	; 80016dc <HAL_TIM_PeriodElapsedCallback+0x264>
 80015fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001600:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80016e0 <HAL_TIM_PeriodElapsedCallback+0x268>
 8001604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001608:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80016e4 <HAL_TIM_PeriodElapsedCallback+0x26c>
 800160c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
			encodeSpeed2 = rpm2 / 60 * (2*M_PI);
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80016e4 <HAL_TIM_PeriodElapsedCallback+0x26c>
 8001620:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001624:	ee16 0a90 	vmov	r0, s13
 8001628:	f7fe ff36 	bl	8000498 <__aeabi_f2d>
 800162c:	a31e      	add	r3, pc, #120	; (adr r3, 80016a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ff89 	bl	8000548 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff f9b5 	bl	80009ac <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001646:	6013      	str	r3, [r2, #0]
			cntPulse2 = 0;
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

			if (runMotor2 == '1')
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b31      	cmp	r3, #49	; 0x31
 8001654:	d114      	bne.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x208>
			{
				sig2 = controlVelocityM2(directMotor2, setSpeed2, encodeSpeed2);
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001664:	ed93 7a00 	vldr	s14, [r3]
 8001668:	eef0 0a47 	vmov.f32	s1, s14
 800166c:	eeb0 0a67 	vmov.f32	s0, s15
 8001670:	4827      	ldr	r0, [pc, #156]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001672:	f7ff feb5 	bl	80013e0 <controlVelocityM2>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800167c:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN3_Pin, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN4_Pin, 0);
			}
		}
	}
}
 800167e:	e00f      	b.n	80016a0 <HAL_TIM_PeriodElapsedCallback+0x228>
			else if (runMotor2 == '0')
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b30      	cmp	r3, #48	; 0x30
 8001686:	d10b      	bne.n	80016a0 <HAL_TIM_PeriodElapsedCallback+0x228>
				HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN3_Pin, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f001 f9e6 	bl	8002a60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN4_Pin, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2108      	movs	r1, #8
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f001 f9e0 	bl	8002a60 <HAL_GPIO_WritePin>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	401921fb 	.word	0x401921fb
 80016b0:	20000074 	.word	0x20000074
 80016b4:	200001dc 	.word	0x200001dc
 80016b8:	200001ec 	.word	0x200001ec
 80016bc:	20000204 	.word	0x20000204
 80016c0:	200001f0 	.word	0x200001f0
 80016c4:	20000244 	.word	0x20000244
 80016c8:	200001fc 	.word	0x200001fc
 80016cc:	20000248 	.word	0x20000248
 80016d0:	20000200 	.word	0x20000200
 80016d4:	66666667 	.word	0x66666667
 80016d8:	20000234 	.word	0x20000234
 80016dc:	43a50000 	.word	0x43a50000
 80016e0:	42c80000 	.word	0x42c80000
 80016e4:	42700000 	.word	0x42700000
 80016e8:	2000023c 	.word	0x2000023c
 80016ec:	2000021c 	.word	0x2000021c
 80016f0:	20000214 	.word	0x20000214
 80016f4:	20000220 	.word	0x20000220
 80016f8:	20000210 	.word	0x20000210
 80016fc:	48000400 	.word	0x48000400
 8001700:	20000238 	.word	0x20000238
 8001704:	20000240 	.word	0x20000240
 8001708:	2000021d 	.word	0x2000021d
 800170c:	20000218 	.word	0x20000218
 8001710:	20000224 	.word	0x20000224
 8001714:	20000212 	.word	0x20000212

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171c:	f000 fc21 	bl	8001f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001720:	f000 f82c 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001724:	f000 f99e 	bl	8001a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001728:	f000 f97e 	bl	8001a28 <MX_DMA_Init>
  MX_TIM6_Init();
 800172c:	f000 f8e0 	bl	80018f0 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001730:	f000 f87a 	bl	8001828 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001734:	f000 f948 	bl	80019c8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001738:	f000 f910 	bl	800195c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <main+0x50>)
 800173e:	f002 fbbb 	bl	8003eb8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001742:	2100      	movs	r1, #0
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <main+0x54>)
 8001746:	f002 fc63 	bl	8004010 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 800174a:	2104      	movs	r1, #4
 800174c:	4807      	ldr	r0, [pc, #28]	; (800176c <main+0x54>)
 800174e:	f002 fc5f 	bl	8004010 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart2, uartRxBuffer, SIZE_RX_BUFFER);
 8001752:	2208      	movs	r2, #8
 8001754:	4906      	ldr	r1, [pc, #24]	; (8001770 <main+0x58>)
 8001756:	4807      	ldr	r0, [pc, #28]	; (8001774 <main+0x5c>)
 8001758:	f003 fbda 	bl	8004f10 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim7);
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <main+0x60>)
 800175e:	f002 fbab 	bl	8003eb8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	readUltrasonicSensor();
 8001762:	f7ff fca5 	bl	80010b0 <readUltrasonicSensor>
 8001766:	e7fc      	b.n	8001762 <main+0x4a>
 8001768:	20000074 	.word	0x20000074
 800176c:	20000028 	.word	0x20000028
 8001770:	20000208 	.word	0x20000208
 8001774:	2000010c 	.word	0x2000010c
 8001778:	200000c0 	.word	0x200000c0

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b096      	sub	sp, #88	; 0x58
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	2244      	movs	r2, #68	; 0x44
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fd66 	bl	800625c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800179e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017a2:	f001 f9ab 	bl	8002afc <HAL_PWREx_ControlVoltageScaling>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017ac:	f000 f9f2 	bl	8001b94 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017b0:	f001 f986 	bl	8002ac0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <SystemClock_Config+0xa8>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <SystemClock_Config+0xa8>)
 80017bc:	f023 0318 	bic.w	r3, r3, #24
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017c4:	2314      	movs	r3, #20
 80017c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017d4:	2360      	movs	r3, #96	; 0x60
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017d8:	2300      	movs	r3, #0
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 f9e1 	bl	8002ba8 <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80017ec:	f000 f9d2 	bl	8001b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f0:	230f      	movs	r3, #15
 80017f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fde1 	bl	80033d0 <HAL_RCC_ClockConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001814:	f000 f9be 	bl	8001b94 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001818:	f002 f9f4 	bl	8003c04 <HAL_RCCEx_EnableMSIPLLMode>
}
 800181c:	bf00      	nop
 800181e:	3758      	adds	r7, #88	; 0x58
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <MX_TIM2_Init+0xc4>)
 800184e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001856:	2201      	movs	r2, #1
 8001858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <MX_TIM2_Init+0xc4>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001862:	2264      	movs	r2, #100	; 0x64
 8001864:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <MX_TIM2_Init+0xc4>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001872:	481e      	ldr	r0, [pc, #120]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001874:	f002 fb74 	bl	8003f60 <HAL_TIM_PWM_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800187e:	f000 f989 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4816      	ldr	r0, [pc, #88]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001892:	f003 f9e1 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800189c:	f000 f97a 	bl	8001b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a0:	2360      	movs	r3, #96	; 0x60
 80018a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	480d      	ldr	r0, [pc, #52]	; (80018ec <MX_TIM2_Init+0xc4>)
 80018b8:	f002 fd8a 	bl	80043d0 <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018c2:	f000 f967 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	2204      	movs	r2, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <MX_TIM2_Init+0xc4>)
 80018ce:	f002 fd7f 	bl	80043d0 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018d8:	f000 f95c 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <MX_TIM2_Init+0xc4>)
 80018de:	f000 f9db 	bl	8001c98 <HAL_TIM_MspPostInit>

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000028 	.word	0x20000028

080018f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_TIM6_Init+0x64>)
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <MX_TIM6_Init+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_TIM6_Init+0x64>)
 8001908:	2203      	movs	r2, #3
 800190a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_TIM6_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_TIM6_Init+0x64>)
 8001914:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001918:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_TIM6_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_TIM6_Init+0x64>)
 8001922:	f002 fa71 	bl	8003e08 <HAL_TIM_Base_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800192c:	f000 f932 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_TIM6_Init+0x64>)
 800193e:	f003 f98b 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001948:	f000 f924 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000074 	.word	0x20000074
 8001958:	40001000 	.word	0x40001000

0800195c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_TIM7_Init+0x64>)
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <MX_TIM7_Init+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_TIM7_Init+0x64>)
 8001974:	2203      	movs	r2, #3
 8001976:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_TIM7_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_TIM7_Init+0x64>)
 8001980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001984:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_TIM7_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800198c:	480c      	ldr	r0, [pc, #48]	; (80019c0 <MX_TIM7_Init+0x64>)
 800198e:	f002 fa3b 	bl	8003e08 <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001998:	f000 f8fc 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_TIM7_Init+0x64>)
 80019aa:	f003 f955 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80019b4:	f000 f8ee 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200000c0 	.word	0x200000c0
 80019c4:	40001400 	.word	0x40001400

080019c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <MX_USART2_UART_Init+0x5c>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 8001a0c:	f003 f9a8 	bl	8004d60 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a16:	f000 f8bd 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000010c 	.word	0x2000010c
 8001a24:	40004400 	.word	0x40004400

08001a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_DMA_Init+0x38>)
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <MX_DMA_Init+0x38>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6493      	str	r3, [r2, #72]	; 0x48
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_DMA_Init+0x38>)
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2010      	movs	r0, #16
 8001a4c:	f000 fbd9 	bl	8002202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a50:	2010      	movs	r0, #16
 8001a52:	f000 fbf2 	bl	800223a <HAL_NVIC_EnableIRQ>

}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	4a43      	ldr	r2, [pc, #268]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a3d      	ldr	r2, [pc, #244]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <MX_GPIO_Init+0x128>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_Output_IN4_Pin|GPIO_Output_IN3_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2188      	movs	r1, #136	; 0x88
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aca:	f000 ffc9 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_Output_IN1_Pin|GPIO_Output_IN2_Pin|GPIO_Output_trig_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2183      	movs	r1, #131	; 0x83
 8001ad2:	482f      	ldr	r0, [pc, #188]	; (8001b90 <MX_GPIO_Init+0x12c>)
 8001ad4:	f000 ffc4 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_Output_IN4_Pin GPIO_Output_IN3_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_IN4_Pin|GPIO_Output_IN3_Pin;
 8001ad8:	2388      	movs	r3, #136	; 0x88
 8001ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af2:	f000 fe33 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001af6:	2350      	movs	r3, #80	; 0x50
 8001af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0e:	f000 fe25 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Output_IN1_Pin GPIO_Output_IN2_Pin GPIO_Output_trig_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_IN1_Pin|GPIO_Output_IN2_Pin|GPIO_Output_trig_Pin;
 8001b12:	2383      	movs	r3, #131	; 0x83
 8001b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4619      	mov	r1, r3
 8001b28:	4819      	ldr	r0, [pc, #100]	; (8001b90 <MX_GPIO_Init+0x12c>)
 8001b2a:	f000 fe17 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_echo_Pin GPIO_Input_IS5_Pin GPIO_Input_IS4_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_echo_Pin|GPIO_Input_IS5_Pin|GPIO_Input_IS4_Pin;
 8001b2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f000 fe09 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_IS1_Pin GPIO_Input_IS2_Pin GPIO_Input_IS3_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_IS1_Pin|GPIO_Input_IS2_Pin|GPIO_Input_IS3_Pin;
 8001b4a:	2338      	movs	r3, #56	; 0x38
 8001b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <MX_GPIO_Init+0x12c>)
 8001b5e:	f000 fdfd 	bl	800275c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	200a      	movs	r0, #10
 8001b68:	f000 fb4b 	bl	8002202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b6c:	200a      	movs	r0, #10
 8001b6e:	f000 fb64 	bl	800223a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2017      	movs	r0, #23
 8001b78:	f000 fb43 	bl	8002202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b7c:	2017      	movs	r0, #23
 8001b7e:	f000 fb5c 	bl	800223a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b82:	bf00      	nop
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	48000400 	.word	0x48000400

08001b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b98:	b672      	cpsid	i
}
 8001b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <Error_Handler+0x8>
	...

08001ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_MspInit+0x44>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_MspInit+0x44>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_MspInit+0x44>)
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_MspInit+0x44>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_MspInit+0x44>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_MspInit+0x44>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_TIM_PWM_MspInit+0x38>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_TIM_PWM_MspInit+0x38>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6593      	str	r3, [r2, #88]	; 0x58
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_TIM_PWM_MspInit+0x38>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_TIM_Base_MspInit+0x68>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d114      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_TIM_Base_MspInit+0x6c>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <HAL_TIM_Base_MspInit+0x6c>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_TIM_Base_MspInit+0x6c>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2036      	movs	r0, #54	; 0x36
 8001c54:	f000 fad5 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c58:	2036      	movs	r0, #54	; 0x36
 8001c5a:	f000 faee 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c5e:	e010      	b.n	8001c82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_TIM_Base_MspInit+0x70>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10b      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_TIM_Base_MspInit+0x6c>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <HAL_TIM_Base_MspInit+0x6c>)
 8001c70:	f043 0320 	orr.w	r3, r3, #32
 8001c74:	6593      	str	r3, [r2, #88]	; 0x58
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_TIM_Base_MspInit+0x6c>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40001000 	.word	0x40001000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40001400 	.word	0x40001400

08001c98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_TIM_MspPostInit+0x64>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_TIM_MspPostInit+0x64>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_TIM_MspPostInit+0x64>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf0:	f000 fd34 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b09e      	sub	sp, #120	; 0x78
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2254      	movs	r2, #84	; 0x54
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 fa9b 	bl	800625c <memset>
  if(huart->Instance==USART2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a40      	ldr	r2, [pc, #256]	; (8001e2c <HAL_UART_MspInit+0x12c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d179      	bne.n	8001e24 <HAL_UART_MspInit+0x124>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fd6b 	bl	8003818 <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d48:	f7ff ff24 	bl	8001b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4c:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_UART_MspInit+0x130>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <HAL_UART_MspInit+0x130>)
 8001d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d56:	6593      	str	r3, [r2, #88]	; 0x58
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_UART_MspInit+0x130>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_UART_MspInit+0x130>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <HAL_UART_MspInit+0x130>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_UART_MspInit+0x130>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9a:	f000 fcdf 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001db0:	2303      	movs	r3, #3
 8001db2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f000 fccd 	bl	800275c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_UART_MspInit+0x138>)
 8001dc6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001df8:	480e      	ldr	r0, [pc, #56]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001dfa:	f000 fa39 	bl	8002270 <HAL_DMA_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001e04:	f7ff fec6 	bl	8001b94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001e0c:	675a      	str	r2, [r3, #116]	; 0x74
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_UART_MspInit+0x134>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	2026      	movs	r0, #38	; 0x26
 8001e1a:	f000 f9f2 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e1e:	2026      	movs	r0, #38	; 0x26
 8001e20:	f000 fa0b 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3778      	adds	r7, #120	; 0x78
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40004400 	.word	0x40004400
 8001e30:	40021000 	.word	0x40021000
 8001e34:	20000194 	.word	0x20000194
 8001e38:	4002006c 	.word	0x4002006c

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e40:	e7fe      	b.n	8001e40 <NMI_Handler+0x4>

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f000 f8c0 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e94:	2010      	movs	r0, #16
 8001e96:	f000 fdfb 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA1_Channel6_IRQHandler+0x10>)
 8001ea6:	f000 fb7a 	bl	800259e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000194 	.word	0x20000194

08001eb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001eb8:	2040      	movs	r0, #64	; 0x40
 8001eba:	f000 fde9 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <USART2_IRQHandler+0x10>)
 8001eca:	f003 f86d 	bl	8004fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000010c 	.word	0x2000010c

08001ed8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <TIM6_DAC_IRQHandler+0x10>)
 8001ede:	f002 f975 	bl	80041cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000074 	.word	0x20000074

08001eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <SystemInit+0x20>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <SystemInit+0x20>)
 8001ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f14:	f7ff ffea 	bl	8001eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f1a:	490d      	ldr	r1, [pc, #52]	; (8001f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <LoopForever+0xe>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f30:	4c0a      	ldr	r4, [pc, #40]	; (8001f5c <LoopForever+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f004 f995 	bl	800626c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f42:	f7ff fbe9 	bl	8001718 <main>

08001f46 <LoopForever>:

LoopForever:
    b LoopForever
 8001f46:	e7fe      	b.n	8001f46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f54:	0800634c 	.word	0x0800634c
  ldr r2, =_sbss
 8001f58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f5c:	20000258 	.word	0x20000258

08001f60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_IRQHandler>

08001f62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f000 f93d 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f72:	200f      	movs	r0, #15
 8001f74:	f000 f80e 	bl	8001f94 <HAL_InitTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	e001      	b.n	8001f88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f84:	f7ff fe0c 	bl	8001ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f88:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_InitTick+0x6c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d023      	beq.n	8001ff0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_InitTick+0x70>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_InitTick+0x6c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f949 	bl	8002256 <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d809      	bhi.n	8001fe4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f000 f913 	bl	8002202 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_InitTick+0x74>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e007      	b.n	8001ff4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e004      	b.n	8001ff4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e001      	b.n	8001ff4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000008 	.word	0x20000008
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000008 	.word	0x20000008
 8002030:	20000254 	.word	0x20000254

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000254 	.word	0x20000254

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <__NVIC_EnableIRQ+0x38>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	; (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	; (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b8:	d301      	bcc.n	80021be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <SysTick_Config+0x40>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c6:	210f      	movs	r1, #15
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f7ff ff8e 	bl	80020ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <SysTick_Config+0x40>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <SysTick_Config+0x40>)
 80021d8:	2207      	movs	r2, #7
 80021da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	e000e010 	.word	0xe000e010

080021ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff29 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff3e 	bl	8002094 <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ff8e 	bl	8002140 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff5d 	bl	80020ec <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff31 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffa2 	bl	80021a8 <SysTick_Config>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e098      	b.n	80023b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	4b4d      	ldr	r3, [pc, #308]	; (80023c0 <HAL_DMA_Init+0x150>)
 800228a:	429a      	cmp	r2, r3
 800228c:	d80f      	bhi.n	80022ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	4b4b      	ldr	r3, [pc, #300]	; (80023c4 <HAL_DMA_Init+0x154>)
 8002296:	4413      	add	r3, r2
 8002298:	4a4b      	ldr	r2, [pc, #300]	; (80023c8 <HAL_DMA_Init+0x158>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	009a      	lsls	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a48      	ldr	r2, [pc, #288]	; (80023cc <HAL_DMA_Init+0x15c>)
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
 80022ac:	e00e      	b.n	80022cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <HAL_DMA_Init+0x160>)
 80022b6:	4413      	add	r3, r2
 80022b8:	4a43      	ldr	r2, [pc, #268]	; (80023c8 <HAL_DMA_Init+0x158>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	009a      	lsls	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a42      	ldr	r2, [pc, #264]	; (80023d4 <HAL_DMA_Init+0x164>)
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002326:	d039      	beq.n	800239c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_DMA_Init+0x15c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11a      	bne.n	8002368 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_DMA_Init+0x168>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f003 031c 	and.w	r3, r3, #28
 800233e:	210f      	movs	r1, #15
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	4924      	ldr	r1, [pc, #144]	; (80023d8 <HAL_DMA_Init+0x168>)
 8002348:	4013      	ands	r3, r2
 800234a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_DMA_Init+0x168>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f003 031c 	and.w	r3, r3, #28
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	491d      	ldr	r1, [pc, #116]	; (80023d8 <HAL_DMA_Init+0x168>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
 8002366:	e019      	b.n	800239c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_DMA_Init+0x16c>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f003 031c 	and.w	r3, r3, #28
 8002374:	210f      	movs	r1, #15
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	4917      	ldr	r1, [pc, #92]	; (80023dc <HAL_DMA_Init+0x16c>)
 800237e:	4013      	ands	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_DMA_Init+0x16c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f003 031c 	and.w	r3, r3, #28
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	4911      	ldr	r1, [pc, #68]	; (80023dc <HAL_DMA_Init+0x16c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40020407 	.word	0x40020407
 80023c4:	bffdfff8 	.word	0xbffdfff8
 80023c8:	cccccccd 	.word	0xcccccccd
 80023cc:	40020000 	.word	0x40020000
 80023d0:	bffdfbf8 	.word	0xbffdfbf8
 80023d4:	40020400 	.word	0x40020400
 80023d8:	400200a8 	.word	0x400200a8
 80023dc:	400204a8 	.word	0x400204a8

080023e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_DMA_Start_IT+0x20>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e04b      	b.n	8002498 <HAL_DMA_Start_IT+0xb8>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d13a      	bne.n	800248a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f95f 	bl	80026fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 020e 	orr.w	r2, r2, #14
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e00f      	b.n	8002478 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0204 	bic.w	r2, r2, #4
 8002466:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 020a 	orr.w	r2, r2, #10
 8002476:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e005      	b.n	8002496 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002492:	2302      	movs	r3, #2
 8002494:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002496:	7dfb      	ldrb	r3, [r7, #23]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d008      	beq.n	80024ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2204      	movs	r2, #4
 80024bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e022      	b.n	8002510 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 020e 	bic.w	r2, r2, #14
 80024d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f003 021c 	and.w	r2, r3, #28
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f202 	lsl.w	r2, r1, r2
 80024fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d005      	beq.n	8002540 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e029      	b.n	8002594 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 020e 	bic.w	r2, r2, #14
 800254e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f003 021c 	and.w	r2, r3, #28
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
    }
  }
  return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f003 031c 	and.w	r3, r3, #28
 80025be:	2204      	movs	r2, #4
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d026      	beq.n	8002618 <HAL_DMA_IRQHandler+0x7a>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d021      	beq.n	8002618 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0204 	bic.w	r2, r2, #4
 80025f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f003 021c 	and.w	r2, r3, #28
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2104      	movs	r1, #4
 8002600:	fa01 f202 	lsl.w	r2, r1, r2
 8002604:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	2b00      	cmp	r3, #0
 800260c:	d071      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002616:	e06c      	b.n	80026f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f003 031c 	and.w	r3, r3, #28
 8002620:	2202      	movs	r2, #2
 8002622:	409a      	lsls	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d02e      	beq.n	800268a <HAL_DMA_IRQHandler+0xec>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d029      	beq.n	800268a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 020a 	bic.w	r2, r2, #10
 8002652:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f003 021c 	and.w	r2, r3, #28
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2102      	movs	r1, #2
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d038      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002688:	e033      	b.n	80026f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f003 031c 	and.w	r3, r3, #28
 8002692:	2208      	movs	r2, #8
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d02a      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x156>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d025      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020e 	bic.w	r2, r2, #14
 80026b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f003 021c 	and.w	r2, r3, #28
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
}
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f003 021c 	and.w	r2, r3, #28
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b10      	cmp	r3, #16
 800272c:	d108      	bne.n	8002740 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800273e:	e007      	b.n	8002750 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	e148      	b.n	80029fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 813a 	beq.w	80029f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d005      	beq.n	800279c <HAL_GPIO_Init+0x40>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0201 	and.w	r2, r3, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b03      	cmp	r3, #3
 8002808:	d017      	beq.n	800283a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d123      	bne.n	800288e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	6939      	ldr	r1, [r7, #16]
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8094 	beq.w	80029f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d0:	4b52      	ldr	r3, [pc, #328]	; (8002a1c <HAL_GPIO_Init+0x2c0>)
 80028d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d4:	4a51      	ldr	r2, [pc, #324]	; (8002a1c <HAL_GPIO_Init+0x2c0>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6613      	str	r3, [r2, #96]	; 0x60
 80028dc:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_GPIO_Init+0x2c0>)
 80028de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028e8:	4a4d      	ldr	r2, [pc, #308]	; (8002a20 <HAL_GPIO_Init+0x2c4>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002912:	d00d      	beq.n	8002930 <HAL_GPIO_Init+0x1d4>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a43      	ldr	r2, [pc, #268]	; (8002a24 <HAL_GPIO_Init+0x2c8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <HAL_GPIO_Init+0x1d0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a42      	ldr	r2, [pc, #264]	; (8002a28 <HAL_GPIO_Init+0x2cc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_GPIO_Init+0x1cc>
 8002924:	2302      	movs	r3, #2
 8002926:	e004      	b.n	8002932 <HAL_GPIO_Init+0x1d6>
 8002928:	2307      	movs	r3, #7
 800292a:	e002      	b.n	8002932 <HAL_GPIO_Init+0x1d6>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_GPIO_Init+0x1d6>
 8002930:	2300      	movs	r3, #0
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	f002 0203 	and.w	r2, r2, #3
 8002938:	0092      	lsls	r2, r2, #2
 800293a:	4093      	lsls	r3, r2
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002942:	4937      	ldr	r1, [pc, #220]	; (8002a20 <HAL_GPIO_Init+0x2c4>)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002974:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800299e:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029f2:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3301      	adds	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f47f aeaf 	bne.w	800276c <HAL_GPIO_Init+0x10>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40010000 	.word	0x40010000
 8002a24:	48000400 	.word	0x48000400
 8002a28:	48000800 	.word	0x48000800
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	e001      	b.n	8002a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a7c:	e002      	b.n	8002a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fc2c 	bl	800130c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40007000 	.word	0x40007000

08002ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0a:	d130      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d038      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2232      	movs	r2, #50	; 0x32
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b40:	e002      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	d110      	bne.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00f      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d007      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f000 bc02 	b.w	80033c0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbc:	4b96      	ldr	r3, [pc, #600]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc6:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80e4 	beq.w	8002da6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4c>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	f040 808b 	bne.w	8002d02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f040 8087 	bne.w	8002d02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf4:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x64>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e3d9      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1a      	ldr	r2, [r3, #32]
 8002c10:	4b81      	ldr	r3, [pc, #516]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <HAL_RCC_OscConfig+0x7e>
 8002c1c:	4b7e      	ldr	r3, [pc, #504]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c24:	e005      	b.n	8002c32 <HAL_RCC_OscConfig+0x8a>
 8002c26:	4b7c      	ldr	r3, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d223      	bcs.n	8002c7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fd8c 	bl	8003758 <RCC_SetFlashLatencyFromMSIRange>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e3ba      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	496d      	ldr	r1, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c68:	4b6b      	ldr	r3, [pc, #428]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	4968      	ldr	r1, [pc, #416]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
 8002c7c:	e025      	b.n	8002cca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7e:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4960      	ldr	r1, [pc, #384]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	495b      	ldr	r1, [pc, #364]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fd4c 	bl	8003758 <RCC_SetFlashLatencyFromMSIRange>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e37a      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cca:	f000 fc81 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4950      	ldr	r1, [pc, #320]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002cdc:	5ccb      	ldrb	r3, [r1, r3]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a4e      	ldr	r2, [pc, #312]	; (8002e20 <HAL_RCC_OscConfig+0x278>)
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cea:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <HAL_RCC_OscConfig+0x27c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f950 	bl	8001f94 <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d052      	beq.n	8002da4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	e35e      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d032      	beq.n	8002d70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d0a:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a42      	ldr	r2, [pc, #264]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d16:	f7ff f98d 	bl	8002034 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1e:	f7ff f989 	bl	8002034 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e347      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4930      	ldr	r1, [pc, #192]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5a:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	492b      	ldr	r1, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
 8002d6e:	e01a      	b.n	8002da6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d70:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a28      	ldr	r2, [pc, #160]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff f95a 	bl	8002034 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d84:	f7ff f956 	bl	8002034 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e314      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1dc>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d073      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x21c>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d10e      	bne.n	8002ddc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d063      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d15f      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e2f1      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x24c>
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e025      	b.n	8002e40 <HAL_RCC_OscConfig+0x298>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d114      	bne.n	8002e28 <HAL_RCC_OscConfig+0x280>
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a02      	ldr	r2, [pc, #8]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e013      	b.n	8002e40 <HAL_RCC_OscConfig+0x298>
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	080062f4 	.word	0x080062f4
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004
 8002e28:	4ba0      	ldr	r3, [pc, #640]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a9f      	ldr	r2, [pc, #636]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b9d      	ldr	r3, [pc, #628]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a9c      	ldr	r2, [pc, #624]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7ff f8f4 	bl	8002034 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7ff f8f0 	bl	8002034 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e2ae      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e62:	4b92      	ldr	r3, [pc, #584]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x2a8>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7ff f8e0 	bl	8002034 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7ff f8dc 	bl	8002034 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e29a      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8a:	4b88      	ldr	r3, [pc, #544]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2d0>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d060      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x310>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d119      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d116      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	4b7c      	ldr	r3, [pc, #496]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x328>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e277      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4973      	ldr	r1, [pc, #460]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	e040      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d023      	beq.n	8002f36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eee:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6e      	ldr	r2, [pc, #440]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7ff f89b 	bl	8002034 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f02:	f7ff f897 	bl	8002034 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e255      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b62      	ldr	r3, [pc, #392]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	495f      	ldr	r1, [pc, #380]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
 8002f34:	e018      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b5d      	ldr	r3, [pc, #372]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5c      	ldr	r2, [pc, #368]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7ff f877 	bl	8002034 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7ff f873 	bl	8002034 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e231      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03c      	beq.n	8002fee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	4a4a      	ldr	r2, [pc, #296]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7ff f852 	bl	8002034 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7ff f84e 	bl	8002034 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e20c      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fa6:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3ec>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbc:	4a3b      	ldr	r2, [pc, #236]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7ff f835 	bl	8002034 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fce:	f7ff f831 	bl	8002034 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1ef      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe0:	4b32      	ldr	r3, [pc, #200]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ef      	bne.n	8002fce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80a6 	beq.w	8003148 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <HAL_RCC_OscConfig+0x508>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d118      	bne.n	8003066 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <HAL_RCC_OscConfig+0x508>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_RCC_OscConfig+0x508>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003040:	f7fe fff8 	bl	8002034 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe fff4 	bl	8002034 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1b2      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_RCC_OscConfig+0x508>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d108      	bne.n	8003080 <HAL_RCC_OscConfig+0x4d8>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307e:	e029      	b.n	80030d4 <HAL_RCC_OscConfig+0x52c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d115      	bne.n	80030b4 <HAL_RCC_OscConfig+0x50c>
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	4a07      	ldr	r2, [pc, #28]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a03      	ldr	r2, [pc, #12]	; (80030ac <HAL_RCC_OscConfig+0x504>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	e014      	b.n	80030d4 <HAL_RCC_OscConfig+0x52c>
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	4a99      	ldr	r2, [pc, #612]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c4:	4b96      	ldr	r3, [pc, #600]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	4a95      	ldr	r2, [pc, #596]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d016      	beq.n	800310a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe ffaa 	bl	8002034 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe ffa6 	bl	8002034 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e162      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fa:	4b89      	ldr	r3, [pc, #548]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ed      	beq.n	80030e4 <HAL_RCC_OscConfig+0x53c>
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe ff93 	bl	8002034 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe ff8f 	bl	8002034 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e14b      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003128:	4b7d      	ldr	r3, [pc, #500]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ed      	bne.n	8003112 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313c:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a77      	ldr	r2, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 8003142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d03c      	beq.n	80031ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01c      	beq.n	8003196 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800315c:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 800315e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003162:	4a6f      	ldr	r2, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fe ff62 	bl	8002034 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003174:	f7fe ff5e 	bl	8002034 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e11c      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003186:	4b66      	ldr	r3, [pc, #408]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 8003188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ef      	beq.n	8003174 <HAL_RCC_OscConfig+0x5cc>
 8003194:	e01b      	b.n	80031ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003196:	4b62      	ldr	r3, [pc, #392]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 8003198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319c:	4a60      	ldr	r2, [pc, #384]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fe ff45 	bl	8002034 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ae:	f7fe ff41 	bl	8002034 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0ff      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031c0:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80031c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ef      	bne.n	80031ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80f3 	beq.w	80033be <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2b02      	cmp	r3, #2
 80031de:	f040 80c9 	bne.w	8003374 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031e2:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0203 	and.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d12c      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	3b01      	subs	r3, #1
 8003202:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d123      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d11b      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d113      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d109      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	3b01      	subs	r3, #1
 800324a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d06b      	beq.n	8003328 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d062      	beq.n	800331c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003256:	4b32      	ldr	r3, [pc, #200]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0ac      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 800326c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003270:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003272:	f7fe fedf 	bl	8002034 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe fedb 	bl	8002034 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e099      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_RCC_OscConfig+0x77c>)
 800329e:	4013      	ands	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b2:	0212      	lsls	r2, r2, #8
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0552      	lsls	r2, r2, #21
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032c6:	0852      	lsrs	r2, r2, #1
 80032c8:	3a01      	subs	r2, #1
 80032ca:	0652      	lsls	r2, r2, #25
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d2:	06d2      	lsls	r2, r2, #27
 80032d4:	430a      	orrs	r2, r1
 80032d6:	4912      	ldr	r1, [pc, #72]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032dc:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0f      	ldr	r2, [pc, #60]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f4:	f7fe fe9e 	bl	8002034 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fe9a 	bl	8002034 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e058      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_RCC_OscConfig+0x778>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800331a:	e050      	b.n	80033be <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e04f      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
 8003320:	40021000 	.word	0x40021000
 8003324:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d144      	bne.n	80033be <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a23      	ldr	r2, [pc, #140]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 8003346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800334c:	f7fe fe72 	bl	8002034 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe fe6e 	bl	8002034 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e02c      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x7ac>
 8003372:	e024      	b.n	80033be <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d01f      	beq.n	80033ba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 8003380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe fe55 	bl	8002034 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe fe51 	bl	8002034 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e00f      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4905      	ldr	r1, [pc, #20]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_OscConfig+0x824>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
 80033b8:	e001      	b.n	80033be <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	feeefffc 	.word	0xfeeefffc

080033d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0e7      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e4:	4b75      	ldr	r3, [pc, #468]	; (80035bc <HAL_RCC_ClockConfig+0x1ec>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d910      	bls.n	8003414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_ClockConfig+0x1ec>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	4970      	ldr	r1, [pc, #448]	; (80035bc <HAL_RCC_ClockConfig+0x1ec>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b6e      	ldr	r3, [pc, #440]	; (80035bc <HAL_RCC_ClockConfig+0x1ec>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0cf      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d010      	beq.n	8003442 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342c:	429a      	cmp	r2, r3
 800342e:	d908      	bls.n	8003442 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003430:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4960      	ldr	r1, [pc, #384]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04c      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	4b5a      	ldr	r3, [pc, #360]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d121      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0a6      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800346e:	4b54      	ldr	r3, [pc, #336]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e09a      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003486:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e08e      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003496:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e086      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4943      	ldr	r1, [pc, #268]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b8:	f7fe fdbc 	bl	8002034 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7fe fdb8 	bl	8002034 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e06e      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003500:	429a      	cmp	r2, r3
 8003502:	d208      	bcs.n	8003516 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	492b      	ldr	r1, [pc, #172]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_RCC_ClockConfig+0x1ec>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d210      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_ClockConfig+0x1ec>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 0207 	bic.w	r2, r3, #7
 800352c:	4923      	ldr	r1, [pc, #140]	; (80035bc <HAL_RCC_ClockConfig+0x1ec>)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_RCC_ClockConfig+0x1ec>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d001      	beq.n	8003546 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e036      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4918      	ldr	r1, [pc, #96]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4910      	ldr	r1, [pc, #64]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003584:	f000 f824 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	490b      	ldr	r1, [pc, #44]	; (80035c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
 80035a0:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1f8>)
 80035a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1fc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fcf3 	bl	8001f94 <HAL_InitTick>
 80035ae:	4603      	mov	r3, r0
 80035b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80035b2:	7afb      	ldrb	r3, [r7, #11]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40021000 	.word	0x40021000
 80035c4:	080062f4 	.word	0x080062f4
 80035c8:	20000000 	.word	0x20000000
 80035cc:	20000004 	.word	0x20000004

080035d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035de:	4b3e      	ldr	r3, [pc, #248]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e8:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x34>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d121      	bne.n	8003642 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d11e      	bne.n	8003642 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003604:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d107      	bne.n	8003620 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003610:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e005      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800362c:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003634:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10d      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d102      	bne.n	800364e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	e004      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d101      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003654:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003656:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d134      	bne.n	80036c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d003      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0xa6>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d003      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0xac>
 8003674:	e005      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003678:	617b      	str	r3, [r7, #20]
      break;
 800367a:	e005      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800367e:	617b      	str	r3, [r7, #20]
      break;
 8003680:	e002      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	617b      	str	r3, [r7, #20]
      break;
 8003686:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	3301      	adds	r3, #1
 8003694:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003696:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	fb03 f202 	mul.w	r2, r3, r2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	0e5b      	lsrs	r3, r3, #25
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	3301      	adds	r3, #1
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036c8:	69bb      	ldr	r3, [r7, #24]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	; 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
 80036dc:	0800630c 	.word	0x0800630c
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	007a1200 	.word	0x007a1200

080036e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003704:	f7ff fff0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4904      	ldr	r1, [pc, #16]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	08006304 	.word	0x08006304

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003730:	f7ff ffda 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0adb      	lsrs	r3, r3, #11
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	08006304 	.word	0x08006304

08003758 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003764:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003770:	f7ff f9b6 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 8003774:	6178      	str	r0, [r7, #20]
 8003776:	e014      	b.n	80037a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003782:	6593      	str	r3, [r2, #88]	; 0x58
 8003784:	4b22      	ldr	r3, [pc, #136]	; (8003810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003790:	f7ff f9a6 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 8003794:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003796:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800379c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a8:	d10b      	bne.n	80037c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b80      	cmp	r3, #128	; 0x80
 80037ae:	d919      	bls.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2ba0      	cmp	r3, #160	; 0xa0
 80037b4:	d902      	bls.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037b6:	2302      	movs	r3, #2
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	e013      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037bc:	2301      	movs	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	e010      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b80      	cmp	r3, #128	; 0x80
 80037c6:	d902      	bls.n	80037ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037c8:	2303      	movs	r3, #3
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	e00a      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d102      	bne.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037d4:	2302      	movs	r3, #2
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e004      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b70      	cmp	r3, #112	; 0x70
 80037de:	d101      	bne.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037e0:	2301      	movs	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 0207 	bic.w	r2, r3, #7
 80037ec:	4909      	ldr	r1, [pc, #36]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d001      	beq.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	40022000 	.word	0x40022000

08003818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003820:	2300      	movs	r3, #0
 8003822:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003824:	2300      	movs	r3, #0
 8003826:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003830:	2b00      	cmp	r3, #0
 8003832:	d031      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800383c:	d01a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800383e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003842:	d814      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800384c:	d10f      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800384e:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800385a:	e00c      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f9de 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800386c:	e003      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	74fb      	strb	r3, [r7, #19]
      break;
 8003872:	e000      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800387c:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	494e      	ldr	r1, [pc, #312]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003892:	e001      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 809e 	beq.w	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038aa:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b40      	ldr	r3, [pc, #256]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6593      	str	r3, [r2, #88]	; 0x58
 80038cc:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d8:	2301      	movs	r3, #1
 80038da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038dc:	4b3a      	ldr	r3, [pc, #232]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a39      	ldr	r2, [pc, #228]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038e8:	f7fe fba4 	bl	8002034 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038ee:	e009      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f0:	f7fe fba0 	bl	8002034 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d902      	bls.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	74fb      	strb	r3, [r7, #19]
        break;
 8003902:	e005      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003904:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ef      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d15a      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003916:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003920:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01e      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	429a      	cmp	r2, r3
 8003930:	d019      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800393e:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800395e:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d016      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe fb60 	bl	8002034 <HAL_GetTick>
 8003974:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	e00b      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fe fb5c 	bl	8002034 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d902      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	74fb      	strb	r3, [r7, #19]
            break;
 800398e:	e006      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ec      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	4904      	ldr	r1, [pc, #16]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039ba:	e009      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
 80039c0:	e006      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039d0:	7c7b      	ldrb	r3, [r7, #17]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b8a      	ldr	r3, [pc, #552]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	4a89      	ldr	r2, [pc, #548]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ee:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f023 0203 	bic.w	r2, r3, #3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4980      	ldr	r1, [pc, #512]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a10:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 020c 	bic.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	4978      	ldr	r1, [pc, #480]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a32:	4b73      	ldr	r3, [pc, #460]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	496f      	ldr	r1, [pc, #444]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a54:	4b6a      	ldr	r3, [pc, #424]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	4967      	ldr	r1, [pc, #412]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a76:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	495e      	ldr	r1, [pc, #376]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a98:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	4956      	ldr	r1, [pc, #344]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aba:	4b51      	ldr	r3, [pc, #324]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	494d      	ldr	r1, [pc, #308]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d028      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003adc:	4b48      	ldr	r3, [pc, #288]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4945      	ldr	r1, [pc, #276]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003afa:	d106      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003afc:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a3f      	ldr	r2, [pc, #252]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b06:	60d3      	str	r3, [r2, #12]
 8003b08:	e011      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b12:	d10c      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f882 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003b2a:	7cfb      	ldrb	r3, [r7, #19]
 8003b2c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d028      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	492d      	ldr	r1, [pc, #180]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b58:	d106      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b5a:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b64:	60d3      	str	r3, [r2, #12]
 8003b66:	e011      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3304      	adds	r3, #4
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f853 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01c      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba6:	4916      	ldr	r1, [pc, #88]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f830 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bec:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000

08003c04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000

08003c24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c32:	4b74      	ldr	r3, [pc, #464]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d018      	beq.n	8003c70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c3e:	4b71      	ldr	r3, [pc, #452]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0203 	and.w	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d10d      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
       ||
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c56:	4b6b      	ldr	r3, [pc, #428]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
       ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d047      	beq.n	8003cfa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	e044      	b.n	8003cfa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d018      	beq.n	8003caa <RCCEx_PLLSAI1_Config+0x86>
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d825      	bhi.n	8003cc8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d002      	beq.n	8003c86 <RCCEx_PLLSAI1_Config+0x62>
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d009      	beq.n	8003c98 <RCCEx_PLLSAI1_Config+0x74>
 8003c84:	e020      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c86:	4b5f      	ldr	r3, [pc, #380]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11d      	bne.n	8003cce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c96:	e01a      	b.n	8003cce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c98:	4b5a      	ldr	r3, [pc, #360]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d116      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca8:	e013      	b.n	8003cd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003caa:	4b56      	ldr	r3, [pc, #344]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cb6:	4b53      	ldr	r3, [pc, #332]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cc6:	e006      	b.n	8003cd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e004      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10d      	bne.n	8003cfa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cde:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	4943      	ldr	r1, [pc, #268]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d17c      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d00:	4b40      	ldr	r3, [pc, #256]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a3f      	ldr	r2, [pc, #252]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fe f992 	bl	8002034 <HAL_GetTick>
 8003d10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d12:	e009      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d14:	f7fe f98e 	bl	8002034 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d902      	bls.n	8003d28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	73fb      	strb	r3, [r7, #15]
        break;
 8003d26:	e005      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d28:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ef      	bne.n	8003d14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d15f      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d110      	bne.n	8003d62 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d40:	4b30      	ldr	r3, [pc, #192]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6892      	ldr	r2, [r2, #8]
 8003d50:	0211      	lsls	r1, r2, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	06d2      	lsls	r2, r2, #27
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	492a      	ldr	r1, [pc, #168]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	610b      	str	r3, [r1, #16]
 8003d60:	e027      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d112      	bne.n	8003d8e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6892      	ldr	r2, [r2, #8]
 8003d78:	0211      	lsls	r1, r2, #8
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6912      	ldr	r2, [r2, #16]
 8003d7e:	0852      	lsrs	r2, r2, #1
 8003d80:	3a01      	subs	r2, #1
 8003d82:	0552      	lsls	r2, r2, #21
 8003d84:	430a      	orrs	r2, r1
 8003d86:	491f      	ldr	r1, [pc, #124]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	610b      	str	r3, [r1, #16]
 8003d8c:	e011      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6892      	ldr	r2, [r2, #8]
 8003d9e:	0211      	lsls	r1, r2, #8
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6952      	ldr	r2, [r2, #20]
 8003da4:	0852      	lsrs	r2, r2, #1
 8003da6:	3a01      	subs	r2, #1
 8003da8:	0652      	lsls	r2, r2, #25
 8003daa:	430a      	orrs	r2, r1
 8003dac:	4915      	ldr	r1, [pc, #84]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fe f939 	bl	8002034 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dc4:	e009      	b.n	8003dda <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dc6:	f7fe f935 	bl	8002034 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d902      	bls.n	8003dda <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	73fb      	strb	r3, [r7, #15]
          break;
 8003dd8:	e005      	b.n	8003de6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0ef      	beq.n	8003dc6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e049      	b.n	8003eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fef8 	bl	8001c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fbfe 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d001      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e03b      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_TIM_Base_Start_IT+0x9c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x4e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d004      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x4e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d115      	bne.n	8003f32 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <HAL_TIM_Base_Start_IT+0xa4>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b06      	cmp	r3, #6
 8003f16:	d015      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x8c>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1e:	d011      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	e008      	b.n	8003f44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e000      	b.n	8003f46 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	00010007 	.word	0x00010007

08003f60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e049      	b.n	8004006 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fe2e 	bl	8001be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	f000 fb52 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_TIM_PWM_Start+0x24>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e03c      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b04      	cmp	r3, #4
 8004038:	d109      	bne.n	800404e <HAL_TIM_PWM_Start+0x3e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e02f      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d109      	bne.n	8004068 <HAL_TIM_PWM_Start+0x58>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e022      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d109      	bne.n	8004082 <HAL_TIM_PWM_Start+0x72>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e015      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d109      	bne.n	800409c <HAL_TIM_PWM_Start+0x8c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e008      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e07e      	b.n	80041b4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0xb6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c4:	e023      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0xc6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d4:	e01b      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_PWM_Start+0xd6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e4:	e013      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_PWM_Start+0xe6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f4:	e00b      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_PWM_Start+0xf6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004104:	e003      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2201      	movs	r2, #1
 8004114:	6839      	ldr	r1, [r7, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fd78 	bl	8004c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a26      	ldr	r2, [pc, #152]	; (80041bc <HAL_TIM_PWM_Start+0x1ac>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_TIM_PWM_Start+0x12a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a25      	ldr	r2, [pc, #148]	; (80041c0 <HAL_TIM_PWM_Start+0x1b0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_TIM_PWM_Start+0x12a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <HAL_TIM_PWM_Start+0x1b4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_TIM_PWM_Start+0x12e>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_TIM_PWM_Start+0x130>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_TIM_PWM_Start+0x1ac>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d009      	beq.n	8004172 <HAL_TIM_PWM_Start+0x162>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004166:	d004      	beq.n	8004172 <HAL_TIM_PWM_Start+0x162>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <HAL_TIM_PWM_Start+0x1b0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d115      	bne.n	800419e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <HAL_TIM_PWM_Start+0x1b8>)
 800417a:	4013      	ands	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d015      	beq.n	80041b0 <HAL_TIM_PWM_Start+0x1a0>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d011      	beq.n	80041b0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	e008      	b.n	80041b0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e000      	b.n	80041b2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	00010007 	.word	0x00010007

080041cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d020      	beq.n	8004230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01b      	beq.n	8004230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0202 	mvn.w	r2, #2
 8004200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f9f8 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f9ea 	bl	80045f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f9fb 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d020      	beq.n	800427c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0204 	mvn.w	r2, #4
 800424c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9d2 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9c4 	bl	80045f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f9d5 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d020      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0208 	mvn.w	r2, #8
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9ac 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f99e 	bl	80045f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f9af 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d020      	beq.n	8004314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0210 	mvn.w	r2, #16
 80042e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2208      	movs	r2, #8
 80042ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f986 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f978 	bl	80045f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f989 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00c      	beq.n	8004338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0201 	mvn.w	r2, #1
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd f8a0 	bl	8001478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fcee 	bl	8004d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fce6 	bl	8004d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f948 	bl	8004634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0220 	mvn.w	r2, #32
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fcae 	bl	8004d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e0ff      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b14      	cmp	r3, #20
 80043fa:	f200 80f0 	bhi.w	80045de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	08004459 	.word	0x08004459
 8004408:	080045df 	.word	0x080045df
 800440c:	080045df 	.word	0x080045df
 8004410:	080045df 	.word	0x080045df
 8004414:	08004499 	.word	0x08004499
 8004418:	080045df 	.word	0x080045df
 800441c:	080045df 	.word	0x080045df
 8004420:	080045df 	.word	0x080045df
 8004424:	080044db 	.word	0x080044db
 8004428:	080045df 	.word	0x080045df
 800442c:	080045df 	.word	0x080045df
 8004430:	080045df 	.word	0x080045df
 8004434:	0800451b 	.word	0x0800451b
 8004438:	080045df 	.word	0x080045df
 800443c:	080045df 	.word	0x080045df
 8004440:	080045df 	.word	0x080045df
 8004444:	0800455d 	.word	0x0800455d
 8004448:	080045df 	.word	0x080045df
 800444c:	080045df 	.word	0x080045df
 8004450:	080045df 	.word	0x080045df
 8004454:	0800459d 	.word	0x0800459d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f956 	bl	8004710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0208 	orr.w	r2, r2, #8
 8004472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0204 	bic.w	r2, r2, #4
 8004482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6999      	ldr	r1, [r3, #24]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	619a      	str	r2, [r3, #24]
      break;
 8004496:	e0a5      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f9b2 	bl	8004808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6999      	ldr	r1, [r3, #24]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	021a      	lsls	r2, r3, #8
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	619a      	str	r2, [r3, #24]
      break;
 80044d8:	e084      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fa0b 	bl	80048fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0208 	orr.w	r2, r2, #8
 80044f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0204 	bic.w	r2, r2, #4
 8004504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69d9      	ldr	r1, [r3, #28]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	61da      	str	r2, [r3, #28]
      break;
 8004518:	e064      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fa63 	bl	80049ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69d9      	ldr	r1, [r3, #28]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	021a      	lsls	r2, r3, #8
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	61da      	str	r2, [r3, #28]
      break;
 800455a:	e043      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 faa0 	bl	8004aa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0208 	orr.w	r2, r2, #8
 8004576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0204 	bic.w	r2, r2, #4
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800459a:	e023      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fad8 	bl	8004b58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045dc:	e002      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
      break;
 80045e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop

080045f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a2a      	ldr	r2, [pc, #168]	; (8004704 <TIM_Base_SetConfig+0xbc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0x20>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d108      	bne.n	800467a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a21      	ldr	r2, [pc, #132]	; (8004704 <TIM_Base_SetConfig+0xbc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0x52>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0x52>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1e      	ldr	r2, [pc, #120]	; (8004708 <TIM_Base_SetConfig+0xc0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0x52>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a1d      	ldr	r2, [pc, #116]	; (800470c <TIM_Base_SetConfig+0xc4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0c      	ldr	r2, [pc, #48]	; (8004704 <TIM_Base_SetConfig+0xbc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <TIM_Base_SetConfig+0xa0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0b      	ldr	r2, [pc, #44]	; (8004708 <TIM_Base_SetConfig+0xc0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_Base_SetConfig+0xa0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <TIM_Base_SetConfig+0xc4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	615a      	str	r2, [r3, #20]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400

08004710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f023 0201 	bic.w	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0302 	bic.w	r3, r3, #2
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a24      	ldr	r2, [pc, #144]	; (80047fc <TIM_OC1_SetConfig+0xec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_OC1_SetConfig+0x70>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a23      	ldr	r2, [pc, #140]	; (8004800 <TIM_OC1_SetConfig+0xf0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_OC1_SetConfig+0x70>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a22      	ldr	r2, [pc, #136]	; (8004804 <TIM_OC1_SetConfig+0xf4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10c      	bne.n	800479a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0308 	bic.w	r3, r3, #8
 8004786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a17      	ldr	r2, [pc, #92]	; (80047fc <TIM_OC1_SetConfig+0xec>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_OC1_SetConfig+0xa2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a16      	ldr	r2, [pc, #88]	; (8004800 <TIM_OC1_SetConfig+0xf0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_OC1_SetConfig+0xa2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a15      	ldr	r2, [pc, #84]	; (8004804 <TIM_OC1_SetConfig+0xf4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d111      	bne.n	80047d6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40014000 	.word	0x40014000
 8004804:	40014400 	.word	0x40014400

08004808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f023 0210 	bic.w	r2, r3, #16
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0320 	bic.w	r3, r3, #32
 8004856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <TIM_OC2_SetConfig+0xe8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d10d      	bne.n	8004888 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004886:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <TIM_OC2_SetConfig+0xe8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <TIM_OC2_SetConfig+0x98>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <TIM_OC2_SetConfig+0xec>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_OC2_SetConfig+0x98>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <TIM_OC2_SetConfig+0xf0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d113      	bne.n	80048c8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40014400 	.word	0x40014400

080048fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0303 	bic.w	r3, r3, #3
 8004936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <TIM_OC3_SetConfig+0xe4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d10d      	bne.n	800497a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <TIM_OC3_SetConfig+0xe4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_OC3_SetConfig+0x96>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <TIM_OC3_SetConfig+0xe8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC3_SetConfig+0x96>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <TIM_OC3_SetConfig+0xec>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d113      	bne.n	80049ba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	621a      	str	r2, [r3, #32]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400

080049ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	031b      	lsls	r3, r3, #12
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <TIM_OC4_SetConfig+0xb0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <TIM_OC4_SetConfig+0x74>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <TIM_OC4_SetConfig+0xb4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC4_SetConfig+0x74>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <TIM_OC4_SetConfig+0xb8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d109      	bne.n	8004a74 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400

08004aa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004aec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <TIM_OC5_SetConfig+0xa4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_OC5_SetConfig+0x6a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <TIM_OC5_SetConfig+0xa8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_OC5_SetConfig+0x6a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a11      	ldr	r2, [pc, #68]	; (8004b54 <TIM_OC5_SetConfig+0xac>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d109      	bne.n	8004b26 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	621a      	str	r2, [r3, #32]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400

08004b58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	051b      	lsls	r3, r3, #20
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <TIM_OC6_SetConfig+0xa8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d007      	beq.n	8004bc4 <TIM_OC6_SetConfig+0x6c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <TIM_OC6_SetConfig+0xac>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC6_SetConfig+0x6c>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a12      	ldr	r2, [pc, #72]	; (8004c08 <TIM_OC6_SetConfig+0xb0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d109      	bne.n	8004bd8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	029b      	lsls	r3, r3, #10
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40014400 	.word	0x40014400

08004c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2201      	movs	r2, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1a      	ldr	r2, [r3, #32]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	401a      	ands	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e04f      	b.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ca0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d004      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a10      	ldr	r2, [pc, #64]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10c      	bne.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40014000 	.word	0x40014000

08004d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e040      	b.n	8004df4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc ffbc 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2224      	movs	r2, #36	; 0x24
 8004d8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fe3e 	bl	8005a28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fc0f 	bl	80055d0 <UART_SetConfig>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e01b      	b.n	8004df4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 febd 	bl	8005b6c <UART_CheckIdleState>
 8004df2:	4603      	mov	r3, r0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d178      	bne.n	8004f06 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_UART_Transmit+0x24>
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e071      	b.n	8004f08 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2221      	movs	r2, #33	; 0x21
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e32:	f7fd f8ff 	bl	8002034 <HAL_GetTick>
 8004e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e50:	d108      	bne.n	8004e64 <HAL_UART_Transmit+0x68>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e003      	b.n	8004e6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e6c:	e030      	b.n	8004ed0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2180      	movs	r1, #128	; 0x80
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 ff1f 	bl	8005cbc <UART_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e03c      	b.n	8004f08 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	881a      	ldrh	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ea0:	b292      	uxth	r2, r2
 8004ea2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e008      	b.n	8004ebe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1c8      	bne.n	8004e6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2140      	movs	r1, #64	; 0x40
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fee8 	bl	8005cbc <UART_WaitOnFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e005      	b.n	8004f08 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e000      	b.n	8004f08 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
  }
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d137      	bne.n	8004f98 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_UART_Receive_DMA+0x24>
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e030      	b.n	8004f9a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_UART_Receive_DMA+0x94>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d01f      	beq.n	8004f88 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	613b      	str	r3, [r7, #16]
   return(result);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	69f9      	ldr	r1, [r7, #28]
 8004f7a:	6a3a      	ldr	r2, [r7, #32]
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e6      	bne.n	8004f56 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fefc 	bl	8005d8c <UART_Start_Receive_DMA>
 8004f94:	4603      	mov	r3, r0
 8004f96:	e000      	b.n	8004f9a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
  }
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3728      	adds	r7, #40	; 0x28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40008000 	.word	0x40008000

08004fa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b0ba      	sub	sp, #232	; 0xe8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004fd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d115      	bne.n	8005010 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00f      	beq.n	8005010 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 82ae 	beq.w	8005562 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	4798      	blx	r3
      }
      return;
 800500e:	e2a8      	b.n	8005562 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8117 	beq.w	8005248 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800501a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005026:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800502a:	4b85      	ldr	r3, [pc, #532]	; (8005240 <HAL_UART_IRQHandler+0x298>)
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 810a 	beq.w	8005248 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <HAL_UART_IRQHandler+0xbc>
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2201      	movs	r2, #1
 8005052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505a:	f043 0201 	orr.w	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d011      	beq.n	8005094 <HAL_UART_IRQHandler+0xec>
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2202      	movs	r2, #2
 8005082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508a:	f043 0204 	orr.w	r2, r3, #4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d011      	beq.n	80050c4 <HAL_UART_IRQHandler+0x11c>
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2204      	movs	r2, #4
 80050b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ba:	f043 0202 	orr.w	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d017      	beq.n	8005100 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d105      	bne.n	80050e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2208      	movs	r2, #8
 80050ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f6:	f043 0208 	orr.w	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005108:	2b00      	cmp	r3, #0
 800510a:	d012      	beq.n	8005132 <HAL_UART_IRQHandler+0x18a>
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00c      	beq.n	8005132 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005120:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8214 	beq.w	8005566 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800514a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d005      	beq.n	800518a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800517e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005182:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005186:	2b00      	cmp	r3, #0
 8005188:	d04f      	beq.n	800522a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fec4 	bl	8005f18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d141      	bne.n	8005222 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1d9      	bne.n	800519e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d013      	beq.n	800521a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f6:	4a13      	ldr	r2, [pc, #76]	; (8005244 <HAL_UART_IRQHandler+0x29c>)
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fd f98c 	bl	800251c <HAL_DMA_Abort_IT>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d017      	beq.n	800523a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005214:	4610      	mov	r0, r2
 8005216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	e00f      	b.n	800523a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9c2 	bl	80055a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005220:	e00b      	b.n	800523a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f9be 	bl	80055a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	e007      	b.n	800523a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9ba 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005238:	e195      	b.n	8005566 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523a:	bf00      	nop
    return;
 800523c:	e193      	b.n	8005566 <HAL_UART_IRQHandler+0x5be>
 800523e:	bf00      	nop
 8005240:	04000120 	.word	0x04000120
 8005244:	080061c9 	.word	0x080061c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524c:	2b01      	cmp	r3, #1
 800524e:	f040 814e 	bne.w	80054ee <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8147 	beq.w	80054ee <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8140 	beq.w	80054ee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2210      	movs	r2, #16
 8005274:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	f040 80b8 	bne.w	80053f6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005292:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8167 	beq.w	800556a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052a6:	429a      	cmp	r2, r3
 80052a8:	f080 815f 	bcs.w	800556a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 8086 	bne.w	80053d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800530a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1da      	bne.n	80052c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005336:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800533a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800533e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e1      	bne.n	8005312 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3308      	adds	r3, #8
 8005354:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800535e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005374:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e3      	bne.n	800534e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80053b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e4      	bne.n	8005394 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fd f866 	bl	80024a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8e2 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053f4:	e0b9      	b.n	800556a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005402:	b29b      	uxth	r3, r3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80ab 	beq.w	800556e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a6 	beq.w	800556e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
 8005446:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800544a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e4      	bne.n	8005422 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3308      	adds	r3, #8
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	623b      	str	r3, [r7, #32]
   return(result);
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800547c:	633a      	str	r2, [r7, #48]	; 0x30
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e3      	bne.n	8005458 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 0310 	bic.w	r3, r3, #16
 80054b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	69b9      	ldr	r1, [r7, #24]
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	617b      	str	r3, [r7, #20]
   return(result);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e4      	bne.n	80054a4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f866 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054ec:	e03f      	b.n	800556e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00e      	beq.n	8005518 <HAL_UART_IRQHandler+0x570>
 80054fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d008      	beq.n	8005518 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800550e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fe99 	bl	8006248 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005516:	e02d      	b.n	8005574 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01c      	beq.n	8005572 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
    }
    return;
 8005540:	e017      	b.n	8005572 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <HAL_UART_IRQHandler+0x5cc>
 800554e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fe4a 	bl	80061f4 <UART_EndTransmit_IT>
    return;
 8005560:	e008      	b.n	8005574 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005562:	bf00      	nop
 8005564:	e006      	b.n	8005574 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005566:	bf00      	nop
 8005568:	e004      	b.n	8005574 <HAL_UART_IRQHandler+0x5cc>
      return;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <HAL_UART_IRQHandler+0x5cc>
      return;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005572:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005574:	37e8      	adds	r7, #232	; 0xe8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop

0800557c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d4:	b08a      	sub	sp, #40	; 0x28
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4bb4      	ldr	r3, [pc, #720]	; (80058d0 <UART_SetConfig+0x300>)
 8005600:	4013      	ands	r3, r2
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005608:	430b      	orrs	r3, r1
 800560a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4aa9      	ldr	r2, [pc, #676]	; (80058d4 <UART_SetConfig+0x304>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	4313      	orrs	r3, r2
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	430a      	orrs	r2, r1
 800564e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4aa0      	ldr	r2, [pc, #640]	; (80058d8 <UART_SetConfig+0x308>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d126      	bne.n	80056a8 <UART_SetConfig+0xd8>
 800565a:	4ba0      	ldr	r3, [pc, #640]	; (80058dc <UART_SetConfig+0x30c>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	2b03      	cmp	r3, #3
 8005666:	d81b      	bhi.n	80056a0 <UART_SetConfig+0xd0>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0xa0>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005681 	.word	0x08005681
 8005674:	08005691 	.word	0x08005691
 8005678:	08005689 	.word	0x08005689
 800567c:	08005699 	.word	0x08005699
 8005680:	2301      	movs	r3, #1
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e080      	b.n	800578a <UART_SetConfig+0x1ba>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568e:	e07c      	b.n	800578a <UART_SetConfig+0x1ba>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005696:	e078      	b.n	800578a <UART_SetConfig+0x1ba>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569e:	e074      	b.n	800578a <UART_SetConfig+0x1ba>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a6:	e070      	b.n	800578a <UART_SetConfig+0x1ba>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a8c      	ldr	r2, [pc, #560]	; (80058e0 <UART_SetConfig+0x310>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d138      	bne.n	8005724 <UART_SetConfig+0x154>
 80056b2:	4b8a      	ldr	r3, [pc, #552]	; (80058dc <UART_SetConfig+0x30c>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b8:	f003 030c 	and.w	r3, r3, #12
 80056bc:	2b0c      	cmp	r3, #12
 80056be:	d82d      	bhi.n	800571c <UART_SetConfig+0x14c>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0xf8>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	0800571d 	.word	0x0800571d
 80056d0:	0800571d 	.word	0x0800571d
 80056d4:	0800571d 	.word	0x0800571d
 80056d8:	0800570d 	.word	0x0800570d
 80056dc:	0800571d 	.word	0x0800571d
 80056e0:	0800571d 	.word	0x0800571d
 80056e4:	0800571d 	.word	0x0800571d
 80056e8:	08005705 	.word	0x08005705
 80056ec:	0800571d 	.word	0x0800571d
 80056f0:	0800571d 	.word	0x0800571d
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	08005715 	.word	0x08005715
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005702:	e042      	b.n	800578a <UART_SetConfig+0x1ba>
 8005704:	2302      	movs	r3, #2
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800570a:	e03e      	b.n	800578a <UART_SetConfig+0x1ba>
 800570c:	2304      	movs	r3, #4
 800570e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005712:	e03a      	b.n	800578a <UART_SetConfig+0x1ba>
 8005714:	2308      	movs	r3, #8
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571a:	e036      	b.n	800578a <UART_SetConfig+0x1ba>
 800571c:	2310      	movs	r3, #16
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e032      	b.n	800578a <UART_SetConfig+0x1ba>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a6a      	ldr	r2, [pc, #424]	; (80058d4 <UART_SetConfig+0x304>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d12a      	bne.n	8005784 <UART_SetConfig+0x1b4>
 800572e:	4b6b      	ldr	r3, [pc, #428]	; (80058dc <UART_SetConfig+0x30c>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800573c:	d01a      	beq.n	8005774 <UART_SetConfig+0x1a4>
 800573e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005742:	d81b      	bhi.n	800577c <UART_SetConfig+0x1ac>
 8005744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005748:	d00c      	beq.n	8005764 <UART_SetConfig+0x194>
 800574a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574e:	d815      	bhi.n	800577c <UART_SetConfig+0x1ac>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <UART_SetConfig+0x18c>
 8005754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005758:	d008      	beq.n	800576c <UART_SetConfig+0x19c>
 800575a:	e00f      	b.n	800577c <UART_SetConfig+0x1ac>
 800575c:	2300      	movs	r3, #0
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005762:	e012      	b.n	800578a <UART_SetConfig+0x1ba>
 8005764:	2302      	movs	r3, #2
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576a:	e00e      	b.n	800578a <UART_SetConfig+0x1ba>
 800576c:	2304      	movs	r3, #4
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005772:	e00a      	b.n	800578a <UART_SetConfig+0x1ba>
 8005774:	2308      	movs	r3, #8
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577a:	e006      	b.n	800578a <UART_SetConfig+0x1ba>
 800577c:	2310      	movs	r3, #16
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005782:	e002      	b.n	800578a <UART_SetConfig+0x1ba>
 8005784:	2310      	movs	r3, #16
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a51      	ldr	r2, [pc, #324]	; (80058d4 <UART_SetConfig+0x304>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d17a      	bne.n	800588a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005798:	2b08      	cmp	r3, #8
 800579a:	d824      	bhi.n	80057e6 <UART_SetConfig+0x216>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <UART_SetConfig+0x1d4>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057e7 	.word	0x080057e7
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057e7 	.word	0x080057e7
 80057b4:	080057d7 	.word	0x080057d7
 80057b8:	080057e7 	.word	0x080057e7
 80057bc:	080057e7 	.word	0x080057e7
 80057c0:	080057e7 	.word	0x080057e7
 80057c4:	080057df 	.word	0x080057df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fd ff9a 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80057cc:	61f8      	str	r0, [r7, #28]
        break;
 80057ce:	e010      	b.n	80057f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d0:	4b44      	ldr	r3, [pc, #272]	; (80058e4 <UART_SetConfig+0x314>)
 80057d2:	61fb      	str	r3, [r7, #28]
        break;
 80057d4:	e00d      	b.n	80057f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d6:	f7fd fefb 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 80057da:	61f8      	str	r0, [r7, #28]
        break;
 80057dc:	e009      	b.n	80057f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e2:	61fb      	str	r3, [r7, #28]
        break;
 80057e4:	e005      	b.n	80057f2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8107 	beq.w	8005a08 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4413      	add	r3, r2
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	429a      	cmp	r2, r3
 8005808:	d305      	bcc.n	8005816 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	429a      	cmp	r2, r3
 8005814:	d903      	bls.n	800581e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800581c:	e0f4      	b.n	8005a08 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2200      	movs	r2, #0
 8005822:	461c      	mov	r4, r3
 8005824:	4615      	mov	r5, r2
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	022b      	lsls	r3, r5, #8
 8005830:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005834:	0222      	lsls	r2, r4, #8
 8005836:	68f9      	ldr	r1, [r7, #12]
 8005838:	6849      	ldr	r1, [r1, #4]
 800583a:	0849      	lsrs	r1, r1, #1
 800583c:	2000      	movs	r0, #0
 800583e:	4688      	mov	r8, r1
 8005840:	4681      	mov	r9, r0
 8005842:	eb12 0a08 	adds.w	sl, r2, r8
 8005846:	eb43 0b09 	adc.w	fp, r3, r9
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005858:	4650      	mov	r0, sl
 800585a:	4659      	mov	r1, fp
 800585c:	f7fb f8f6 	bl	8000a4c <__aeabi_uldivmod>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4613      	mov	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800586e:	d308      	bcc.n	8005882 <UART_SetConfig+0x2b2>
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005876:	d204      	bcs.n	8005882 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	e0c2      	b.n	8005a08 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005888:	e0be      	b.n	8005a08 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005892:	d16a      	bne.n	800596a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005898:	2b08      	cmp	r3, #8
 800589a:	d834      	bhi.n	8005906 <UART_SetConfig+0x336>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0x2d4>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058e9 	.word	0x080058e9
 80058ac:	080058f1 	.word	0x080058f1
 80058b0:	08005907 	.word	0x08005907
 80058b4:	080058f7 	.word	0x080058f7
 80058b8:	08005907 	.word	0x08005907
 80058bc:	08005907 	.word	0x08005907
 80058c0:	08005907 	.word	0x08005907
 80058c4:	080058ff 	.word	0x080058ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c8:	f7fd ff1a 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80058cc:	61f8      	str	r0, [r7, #28]
        break;
 80058ce:	e020      	b.n	8005912 <UART_SetConfig+0x342>
 80058d0:	efff69f3 	.word	0xefff69f3
 80058d4:	40008000 	.word	0x40008000
 80058d8:	40013800 	.word	0x40013800
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40004400 	.word	0x40004400
 80058e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e8:	f7fd ff20 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 80058ec:	61f8      	str	r0, [r7, #28]
        break;
 80058ee:	e010      	b.n	8005912 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b4c      	ldr	r3, [pc, #304]	; (8005a24 <UART_SetConfig+0x454>)
 80058f2:	61fb      	str	r3, [r7, #28]
        break;
 80058f4:	e00d      	b.n	8005912 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7fd fe6b 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 80058fa:	61f8      	str	r0, [r7, #28]
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	61fb      	str	r3, [r7, #28]
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d077      	beq.n	8005a08 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	005a      	lsls	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	441a      	add	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	2b0f      	cmp	r3, #15
 8005932:	d916      	bls.n	8005962 <UART_SetConfig+0x392>
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593a:	d212      	bcs.n	8005962 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f023 030f 	bic.w	r3, r3, #15
 8005944:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	b29b      	uxth	r3, r3
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	b29a      	uxth	r2, r3
 8005952:	8afb      	ldrh	r3, [r7, #22]
 8005954:	4313      	orrs	r3, r2
 8005956:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	8afa      	ldrh	r2, [r7, #22]
 800595e:	60da      	str	r2, [r3, #12]
 8005960:	e052      	b.n	8005a08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005968:	e04e      	b.n	8005a08 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800596a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800596e:	2b08      	cmp	r3, #8
 8005970:	d827      	bhi.n	80059c2 <UART_SetConfig+0x3f2>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <UART_SetConfig+0x3a8>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059ad 	.word	0x080059ad
 8005984:	080059c3 	.word	0x080059c3
 8005988:	080059b3 	.word	0x080059b3
 800598c:	080059c3 	.word	0x080059c3
 8005990:	080059c3 	.word	0x080059c3
 8005994:	080059c3 	.word	0x080059c3
 8005998:	080059bb 	.word	0x080059bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800599c:	f7fd feb0 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80059a0:	61f8      	str	r0, [r7, #28]
        break;
 80059a2:	e014      	b.n	80059ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059a4:	f7fd fec2 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 80059a8:	61f8      	str	r0, [r7, #28]
        break;
 80059aa:	e010      	b.n	80059ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ac:	4b1d      	ldr	r3, [pc, #116]	; (8005a24 <UART_SetConfig+0x454>)
 80059ae:	61fb      	str	r3, [r7, #28]
        break;
 80059b0:	e00d      	b.n	80059ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b2:	f7fd fe0d 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 80059b6:	61f8      	str	r0, [r7, #28]
        break;
 80059b8:	e009      	b.n	80059ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059be:	61fb      	str	r3, [r7, #28]
        break;
 80059c0:	e005      	b.n	80059ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059cc:	bf00      	nop
    }

    if (pclk != 0U)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d019      	beq.n	8005a08 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	085a      	lsrs	r2, r3, #1
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	441a      	add	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b0f      	cmp	r3, #15
 80059ec:	d909      	bls.n	8005a02 <UART_SetConfig+0x432>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f4:	d205      	bcs.n	8005a02 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	e002      	b.n	8005a08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3728      	adds	r7, #40	; 0x28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a22:	bf00      	nop
 8005a24:	00f42400 	.word	0x00f42400

08005a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01a      	beq.n	8005b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b26:	d10a      	bne.n	8005b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	605a      	str	r2, [r3, #4]
  }
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b098      	sub	sp, #96	; 0x60
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b7c:	f7fc fa5a 	bl	8002034 <HAL_GetTick>
 8005b80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d12e      	bne.n	8005bee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f88c 	bl	8005cbc <UART_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d021      	beq.n	8005bee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e6      	bne.n	8005baa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e062      	b.n	8005cb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d149      	bne.n	8005c90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c04:	2200      	movs	r2, #0
 8005c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f856 	bl	8005cbc <UART_WaitOnFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03c      	beq.n	8005c90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	623b      	str	r3, [r7, #32]
   return(result);
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30
 8005c36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e6      	bne.n	8005c16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c68:	61fa      	str	r2, [r7, #28]
 8005c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	617b      	str	r3, [r7, #20]
   return(result);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e011      	b.n	8005cb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3758      	adds	r7, #88	; 0x58
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ccc:	e049      	b.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d045      	beq.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd6:	f7fc f9ad 	bl	8002034 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e048      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d031      	beq.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d110      	bne.n	8005d2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2208      	movs	r2, #8
 8005d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f8ff 	bl	8005f18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e029      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3c:	d111      	bne.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f8e5 	bl	8005f18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e00f      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d0a6      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b096      	sub	sp, #88	; 0x58
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	4613      	mov	r3, r2
 8005d98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2222      	movs	r2, #34	; 0x22
 8005db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d028      	beq.n	8005e12 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc4:	4a3e      	ldr	r2, [pc, #248]	; (8005ec0 <UART_Start_Receive_DMA+0x134>)
 8005dc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dcc:	4a3d      	ldr	r2, [pc, #244]	; (8005ec4 <UART_Start_Receive_DMA+0x138>)
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd4:	4a3c      	ldr	r2, [pc, #240]	; (8005ec8 <UART_Start_Receive_DMA+0x13c>)
 8005dd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ddc:	2200      	movs	r2, #0
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3324      	adds	r3, #36	; 0x24
 8005dea:	4619      	mov	r1, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df0:	461a      	mov	r2, r3
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	f7fc faf4 	bl	80023e0 <HAL_DMA_Start_IT>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2210      	movs	r2, #16
 8005e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e051      	b.n	8005eb6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e3a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	653b      	str	r3, [r7, #80]	; 0x50
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e6c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ea0:	623a      	str	r2, [r7, #32]
 8005ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	69f9      	ldr	r1, [r7, #28]
 8005ea6:	6a3a      	ldr	r2, [r7, #32]
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e5      	bne.n	8005e80 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3758      	adds	r7, #88	; 0x58
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	08005fe1 	.word	0x08005fe1
 8005ec4:	0800610d 	.word	0x0800610d
 8005ec8:	0800614b 	.word	0x0800614b

08005ecc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b089      	sub	sp, #36	; 0x24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6979      	ldr	r1, [r7, #20]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	613b      	str	r3, [r7, #16]
   return(result);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e6      	bne.n	8005ed4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005f0c:	bf00      	nop
 8005f0e:	3724      	adds	r7, #36	; 0x24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b095      	sub	sp, #84	; 0x54
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e6      	bne.n	8005f20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e5      	bne.n	8005f52 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d118      	bne.n	8005fc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0310 	bic.w	r3, r3, #16
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6979      	ldr	r1, [r7, #20]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e6      	bne.n	8005f8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005fd4:	bf00      	nop
 8005fd6:	3754      	adds	r7, #84	; 0x54
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b09c      	sub	sp, #112	; 0x70
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d171      	bne.n	80060e0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006018:	66bb      	str	r3, [r7, #104]	; 0x68
 800601a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006022:	65bb      	str	r3, [r7, #88]	; 0x58
 8006024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e6      	bne.n	8006004 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3308      	adds	r3, #8
 800603c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	f023 0301 	bic.w	r3, r3, #1
 800604c:	667b      	str	r3, [r7, #100]	; 0x64
 800604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3308      	adds	r3, #8
 8006054:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006056:	647a      	str	r2, [r7, #68]	; 0x44
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800605c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e5      	bne.n	8006036 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	623b      	str	r3, [r7, #32]
   return(result);
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006080:	663b      	str	r3, [r7, #96]	; 0x60
 8006082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800608a:	633a      	str	r2, [r7, #48]	; 0x30
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800609e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d118      	bne.n	80060e0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0310 	bic.w	r3, r3, #16
 80060c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e6      	bne.n	80060ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e2:	2200      	movs	r2, #0
 80060e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d107      	bne.n	80060fe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060f4:	4619      	mov	r1, r3
 80060f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060f8:	f7ff fa5e 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060fc:	e002      	b.n	8006104 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80060fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006100:	f7fb f8c6 	bl	8001290 <HAL_UART_RxCpltCallback>
}
 8006104:	bf00      	nop
 8006106:	3770      	adds	r7, #112	; 0x70
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006124:	2b01      	cmp	r3, #1
 8006126:	d109      	bne.n	800613c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	b29b      	uxth	r3, r3
 8006132:	4619      	mov	r1, r3
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff fa3f 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800613a:	e002      	b.n	8006142 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fa27 	bl	8005590 <HAL_UART_RxHalfCpltCallback>
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800615c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006164:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006170:	2b80      	cmp	r3, #128	; 0x80
 8006172:	d109      	bne.n	8006188 <UART_DMAError+0x3e>
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b21      	cmp	r3, #33	; 0x21
 8006178:	d106      	bne.n	8006188 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2200      	movs	r2, #0
 800617e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006182:	6978      	ldr	r0, [r7, #20]
 8006184:	f7ff fea2 	bl	8005ecc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d109      	bne.n	80061aa <UART_DMAError+0x60>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b22      	cmp	r3, #34	; 0x22
 800619a:	d106      	bne.n	80061aa <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80061a4:	6978      	ldr	r0, [r7, #20]
 80061a6:	f7ff feb7 	bl	8005f18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b0:	f043 0210 	orr.w	r2, r3, #16
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ba:	6978      	ldr	r0, [r7, #20]
 80061bc:	f7ff f9f2 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c0:	bf00      	nop
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff f9dc 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	60bb      	str	r3, [r7, #8]
   return(result);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6979      	ldr	r1, [r7, #20]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	613b      	str	r3, [r7, #16]
   return(result);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e6      	bne.n	80061fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff f99e 	bl	800557c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006240:	bf00      	nop
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <memset>:
 800625c:	4402      	add	r2, r0
 800625e:	4603      	mov	r3, r0
 8006260:	4293      	cmp	r3, r2
 8006262:	d100      	bne.n	8006266 <memset+0xa>
 8006264:	4770      	bx	lr
 8006266:	f803 1b01 	strb.w	r1, [r3], #1
 800626a:	e7f9      	b.n	8006260 <memset+0x4>

0800626c <__libc_init_array>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4d0d      	ldr	r5, [pc, #52]	; (80062a4 <__libc_init_array+0x38>)
 8006270:	4c0d      	ldr	r4, [pc, #52]	; (80062a8 <__libc_init_array+0x3c>)
 8006272:	1b64      	subs	r4, r4, r5
 8006274:	10a4      	asrs	r4, r4, #2
 8006276:	2600      	movs	r6, #0
 8006278:	42a6      	cmp	r6, r4
 800627a:	d109      	bne.n	8006290 <__libc_init_array+0x24>
 800627c:	4d0b      	ldr	r5, [pc, #44]	; (80062ac <__libc_init_array+0x40>)
 800627e:	4c0c      	ldr	r4, [pc, #48]	; (80062b0 <__libc_init_array+0x44>)
 8006280:	f000 f820 	bl	80062c4 <_init>
 8006284:	1b64      	subs	r4, r4, r5
 8006286:	10a4      	asrs	r4, r4, #2
 8006288:	2600      	movs	r6, #0
 800628a:	42a6      	cmp	r6, r4
 800628c:	d105      	bne.n	800629a <__libc_init_array+0x2e>
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	f855 3b04 	ldr.w	r3, [r5], #4
 8006294:	4798      	blx	r3
 8006296:	3601      	adds	r6, #1
 8006298:	e7ee      	b.n	8006278 <__libc_init_array+0xc>
 800629a:	f855 3b04 	ldr.w	r3, [r5], #4
 800629e:	4798      	blx	r3
 80062a0:	3601      	adds	r6, #1
 80062a2:	e7f2      	b.n	800628a <__libc_init_array+0x1e>
 80062a4:	08006344 	.word	0x08006344
 80062a8:	08006344 	.word	0x08006344
 80062ac:	08006344 	.word	0x08006344
 80062b0:	08006348 	.word	0x08006348

080062b4 <strcpy>:
 80062b4:	4603      	mov	r3, r0
 80062b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ba:	f803 2b01 	strb.w	r2, [r3], #1
 80062be:	2a00      	cmp	r2, #0
 80062c0:	d1f9      	bne.n	80062b6 <strcpy+0x2>
 80062c2:	4770      	bx	lr

080062c4 <_init>:
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	bf00      	nop
 80062c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ca:	bc08      	pop	{r3}
 80062cc:	469e      	mov	lr, r3
 80062ce:	4770      	bx	lr

080062d0 <_fini>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr
